{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string()\n        : z.string().optional(),\n    EMAIL_SERVER: z.string(),\n    EMAIL_FROM: z.string(),\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    AUTH_SECRET: process.env.AUTH_SECRET,\n    EMAIL_SERVER: process.env.EMAIL_SERVER,\n    EMAIL_FROM: process.env.EMAIL_FROM,\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,uRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,aACE,6EAEI,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACzB,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM;QACtB,YAAY,uLAAA,CAAA,IAAC,CAAC,MAAM;QACpB,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,uLAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,YAAY,QAAQ,GAAG,CAAC,UAAU;QAClC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IACV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/mailers/auth-mailer.ts"],"sourcesContent":["import { createTransport } from \"nodemailer\"\r\nimport type { NodemailerConfig } from \"next-auth/providers/nodemailer\";\r\n\r\ntype SendVerificationRequestParams = \r\n    Parameters<NodemailerConfig[\"sendVerificationRequest\"]>[0] \r\n\r\nexport async function sendVerificationRequest(params: SendVerificationRequestParams) {\r\n  const { identifier, url, provider, theme } = params\r\n  const { host } = new URL(url)\r\n  // NOTE: You are not required to use `nodemailer`, use whatever you want.\r\n  const transport = createTransport(provider.server)\r\n  const result = await transport.sendMail({\r\n    to: identifier,\r\n    from: provider.from,\r\n    subject: `Sign in to ${host}`,\r\n    text: text({ url, host }),\r\n    html: html({ url, host, theme }),\r\n  })\r\n  const failed = result.rejected.concat(result.pending).filter(Boolean)\r\n  if (failed.length) {\r\n    throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`)\r\n  }\r\n}\r\n\r\n/**\r\n * Email HTML body\r\n * Insert invisible space into domains from being turned into a hyperlink by email\r\n * clients like Outlook and Apple mail, as this is confusing because it seems\r\n * like they are supposed to click on it to sign in.\r\n *\r\n * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!\r\n */\r\nfunction html(params: { url: string, host: string, theme: { brandColor?: string, buttonText?: string} }) {\r\n  const { url, host, theme } = params\r\n\r\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\r\n\r\n  const brandColor = theme.brandColor ?? \"#346df1\"\r\n  const color = {\r\n    background: \"#f9f9f9\",\r\n    text: \"#444\",\r\n    mainBackground: \"#fff\",\r\n    buttonBackground: brandColor,\r\n    buttonBorder: brandColor,\r\n    buttonText: theme.buttonText ?? \"#fff\",\r\n  }\r\n\r\n  return `\r\n<body style=\"background: ${color.background};\">\r\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\r\n    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\r\n    <tr>\r\n      <td align=\"center\"\r\n        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\r\n        Sign in to <strong>${escapedHost}</strong>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" style=\"padding: 20px 0;\">\r\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\r\n                target=\"_blank\"\r\n                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\r\n                in</a></td>\r\n          </tr>\r\n        </table>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\"\r\n        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\r\n        If you did not request this email you can safely ignore it.\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</body>\r\n`\r\n}\r\n\r\n/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */\r\nfunction text({ url, host }: { url: string, host: string }) {\r\n  return `Sign in to ${host}\\n${url}\\n\\n`\r\n}"],"names":[],"mappings":";;;AAAA;;AAMO,eAAe,wBAAwB,MAAqC;IACjF,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;IAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI;IACzB,yEAAyE;IACzE,MAAM,YAAY,CAAA,GAAA,yMAAA,CAAA,kBAAe,AAAD,EAAE,SAAS,MAAM;IACjD,MAAM,SAAS,MAAM,UAAU,QAAQ,CAAC;QACtC,IAAI;QACJ,MAAM,SAAS,IAAI;QACnB,SAAS,CAAC,WAAW,EAAE,MAAM;QAC7B,MAAM,KAAK;YAAE;YAAK;QAAK;QACvB,MAAM,KAAK;YAAE;YAAK;YAAM;QAAM;IAChC;IACA,MAAM,SAAS,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,OAAO,EAAE,MAAM,CAAC;IAC7D,IAAI,OAAO,MAAM,EAAE;QACjB,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,OAAO,IAAI,CAAC,MAAM,mBAAmB,CAAC;IACrE;AACF;AAEA;;;;;;;CAOC,GACD,SAAS,KAAK,MAAyF;IACrG,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;IAE7B,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO;IAExC,MAAM,aAAa,MAAM,UAAU,IAAI;IACvC,MAAM,QAAQ;QACZ,YAAY;QACZ,MAAM;QACN,gBAAgB;QAChB,kBAAkB;QAClB,cAAc;QACd,YAAY,MAAM,UAAU,IAAI;IAClC;IAEA,OAAO,CAAC;yBACe,EAAE,MAAM,UAAU,CAAC;;uBAErB,EAAE,MAAM,cAAc,CAAC;;;qGAGuD,EAAE,MAAM,IAAI,CAAC;2BACvF,EAAE,YAAY;;;;;;;oEAO2B,EAAE,MAAM,gBAAgB,CAAC,WAAW,EAAE,IAAI;;0FAEpB,EAAE,MAAM,UAAU,CAAC,mFAAmF,EAAE,MAAM,YAAY,CAAC;;;;;;;;gIAQrF,EAAE,MAAM,IAAI,CAAC;;;;;;AAM7I,CAAC;AACD;AAEA,6FAA6F,GAC7F,SAAS,KAAK,EAAE,GAAG,EAAE,IAAI,EAAiC;IACxD,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,IAAI,IAAI,CAAC;AACzC"}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/auth/config.ts"],"sourcesContent":["// import { PrismaAdapter } from \"@auth/prisma-adapter\";\n// import { type DefaultSession, type NextAuthConfig } from \"next-auth\";\n// import EmailProvider from \"next-auth/providers/nodemailer\";\n// import DiscordProvider from \"next-auth/providers/discord\";\n\n// import { db } from \"~/server/db\";\n// import { sendVerificationRequest } from \"~/mailers/auth-mailer\";\n// import { $Enums } from \"@prisma/client\";\n\n// /**\n//  * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n//  * object and keep type safety.\n//  *\n//  * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n//  */\n// // declare module \"next-auth\" {\n// //   interface Session extends DefaultSession {\n// //     user: {\n// //       id: string;\n// //       // ...other properties\n// //       // role: UserRole;\n// //     } & DefaultSession[\"user\"];\n// //   }\n// declare module \"next-auth\" {\n//   interface Session extends DefaultSession {\n//     user: {\n//       id: string;\n//       // ...other properties\n//       role: $Enums.Role;\n//     } & DefaultSession[\"user\"];\n//   }\n\n//   // interface User {\n//   //   // ...other properties\n//   //   // role: UserRole;\n//   // }\n// }\n\n// /**\n//  * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n//  *\n//  * @see https://next-auth.js.org/configuration/options\n//  */\n// export const authConfig = {\n//   providers: [\n//     EmailProvider({\n//       server: process.env.EMAIL_SERVER,\n//       from: process.env.EMAIL_FROM,\n//       sendVerificationRequest: sendVerificationRequest,\n//     })\n//   ],\n//   adapter: PrismaAdapter(db),\n//   callbacks: {\n//     session: ({ session, user }) => ({\n//       ...session,\n//       user: {\n//         ...session.user,\n//         id: user.id,\n//       },\n//     }),\n//   },\n// } satisfies NextAuthConfig;\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { $Enums } from \"@prisma/client\";\nimport { type DefaultSession, type NextAuthConfig } from \"next-auth\";\nimport EmailProvider from \"next-auth/providers/nodemailer\";\nimport { sendVerificationRequest } from \"~/mailers/auth-mailer\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      // ...other properties\n      role: $Enums.Role;\n    } & DefaultSession[\"user\"];\n  }\n\n  // interface User {\n  //   // ...other properties\n  //   // role: UserRole;\n  // }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authConfig = {\n  providers: [\n    EmailProvider({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n      sendVerificationRequest: sendVerificationRequest,\n    })\n  ],\n  adapter: PrismaAdapter(db),\n  callbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n} satisfies NextAuthConfig;"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,wEAAwE;AACxE,8DAA8D;AAC9D,6DAA6D;AAE7D,oCAAoC;AACpC,mEAAmE;AACnE,2CAA2C;AAE3C,MAAM;AACN,oGAAoG;AACpG,kCAAkC;AAClC,KAAK;AACL,kFAAkF;AAClF,MAAM;AACN,kCAAkC;AAClC,kDAAkD;AAClD,iBAAiB;AACjB,uBAAuB;AACvB,kCAAkC;AAClC,8BAA8B;AAC9B,qCAAqC;AACrC,SAAS;AACT,+BAA+B;AAC/B,+CAA+C;AAC/C,cAAc;AACd,oBAAoB;AACpB,+BAA+B;AAC/B,2BAA2B;AAC3B,kCAAkC;AAClC,MAAM;AAEN,wBAAwB;AACxB,gCAAgC;AAChC,4BAA4B;AAC5B,SAAS;AACT,IAAI;AAEJ,MAAM;AACN,oFAAoF;AACpF,KAAK;AACL,yDAAyD;AACzD,MAAM;AACN,8BAA8B;AAC9B,iBAAiB;AACjB,sBAAsB;AACtB,0CAA0C;AAC1C,sCAAsC;AACtC,0DAA0D;AAC1D,SAAS;AACT,OAAO;AACP,gCAAgC;AAChC,iBAAiB;AACjB,yCAAyC;AACzC,oBAAoB;AACpB,gBAAgB;AAChB,2BAA2B;AAC3B,uBAAuB;AACvB,WAAW;AACX,UAAU;AACV,OAAO;AACP,8BAA8B;;;;AAC9B;AAGA;AACA;AAEA;AAHA;;;;;AA+BO,MAAM,aAAa;IACxB,WAAW;QACT,CAAA,GAAA,kPAAA,CAAA,UAAa,AAAD,EAAE;YACZ,QAAQ,QAAQ,GAAG,CAAC,YAAY;YAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,yBAAyB,kIAAA,CAAA,0BAAuB;QAClD;KACD;IACD,SAAS,CAAA,GAAA,mQAAA,CAAA,gBAAa,AAAD,EAAE,qHAAA,CAAA,KAAE;IACzB,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAK,CAAC;gBAC/B,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,KAAK,EAAE;gBACb;YACF,CAAC;IACH;AACF"}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/auth/index.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { cache } from \"react\";\n\nimport { authConfig } from \"./config\";\n\nconst { auth: uncachedAuth, handlers, signIn, signOut } = NextAuth(authConfig);\n\nconst auth = cache(uncachedAuth);\n\nexport { auth, handlers, signIn, signOut };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;AAHA;;;;AAKA,MAAM,EAAE,MAAM,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,mQAAA,CAAA,UAAQ,AAAD,EAAE,iIAAA,CAAA,aAAU;AAE7E,MAAM,OAAO,CAAA,GAAA,sTAAA,CAAA,QAAK,AAAD,EAAE"}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\n\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { auth } from \"~/server/auth\";\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  const session = await auth();\n\n  return {\n    db,\n    session,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\n/**\n * Protected (authenticated) procedure\n *\n * If you want a query or mutation to ONLY be accessible to logged in users, use this. It verifies\n * the session is valid and guarantees `ctx.session.user` is not null.\n *\n * @see https://trpc.io/docs/procedures\n */\nexport const protectedProcedure = t.procedure\n  .use(timingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.session || !ctx.session.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        // infers the `session` as non-nullable\n        session: { ...ctx.session, user: ctx.session.user },\n      },\n    });\n  });\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;AAED;AACA;AAGA;AACA;AALA;AAEA;AAFA;;;;;;AAmBO,MAAM,oBAAoB,OAAO;IACtC,MAAM,UAAU,MAAM,CAAA,GAAA,gIAAA,CAAA,OAAI,AAAD;IAEzB,OAAO;QACL,IAAA,qHAAA,CAAA,KAAE;QACF;QACA,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,uSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,kMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,uLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC;AAUxC,MAAM,qBAAqB,EAAE,SAAS,CAC1C,GAAG,CAAC,kBACJ,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE;IACjB,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE;QACrC,MAAM,IAAI,iTAAA,CAAA,YAAS,CAAC;YAAE,MAAM;QAAe;IAC7C;IACA,OAAO,KAAK;QACV,KAAK;YACH,uCAAuC;YACvC,SAAS;gBAAE,GAAG,IAAI,OAAO;gBAAE,MAAM,IAAI,OAAO,CAAC,IAAI;YAAC;QACpD;IACF;AACF"}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/routers/order.ts"],"sourcesContent":["import { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\nimport { TRPCError } from \"@trpc/server\";\r\nimport { z } from \"zod\";\r\n\r\nexport const orderRouter = createTRPCRouter({\r\n  //////////////////////////////////////\r\n  getUserOrders: protectedProcedure\r\n    .query(async ({ ctx }) => {\r\n      if (!ctx.session?.user?.id) {\r\n        throw new TRPCError({\r\n          code: \"UNAUTHORIZED\",\r\n          message: \"Необходима авторизация\",\r\n        });\r\n      }\r\n\r\n      return ctx.db.order.findMany({\r\n        where: { userId: ctx.session.user.id },\r\n        orderBy: { createdAt: \"desc\" },\r\n        select: {\r\n          id: true,\r\n          totalAmount: true,\r\n          createdAt: true,\r\n        },\r\n      });\r\n    }),\r\n    //////////////////////////////\r\n  getOrder: protectedProcedure\r\n    .input(z.object({ orderId: z.string() }))\r\n    .query(async ({ ctx, input }) => {\r\n      const order = await ctx.db.order.findUnique({\r\n        where: { id: input.orderId },\r\n        include: {\r\n          user: true,\r\n          items: {\r\n            include: { product: true },\r\n          },\r\n        },\r\n      });\r\n\r\n      if (!order || !order.user) {\r\n        throw new TRPCError({ code: \"NOT_FOUND\", message: \"Заказ не найден\" });\r\n      }\r\n\r\n      return order;\r\n    }),\r\n  issueOrder: protectedProcedure\r\n  .input(z.object({ orderId: z.string() }))\r\n  .mutation(async ({ ctx, input }) => {\r\n    const order = await ctx.db.order.findUnique({\r\n      where: { id: input.orderId },\r\n      include: {\r\n        user: true,\r\n        items: {\r\n          include: { product: true },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!order || !order.user) {\r\n      throw new TRPCError({ code: \"NOT_FOUND\", message: \"Заказ не найден\" });\r\n    }\r\n\r\n    const issuedItems = order.items.map((item) => ({\r\n      userId: order.userId,\r\n      productId: item.productId,\r\n      quantity: item.quantity,\r\n      comment: `Выдан из заказа №${order.id}`,\r\n    }));\r\n\r\n    const totalQuantity = order.items.reduce(\r\n      (sum, item) => sum + item.quantity,\r\n      0\r\n    );\r\n\r\n    const totalAmount = order.items.reduce(\r\n      (sum, item) => sum + item.quantity * item.product.price,\r\n      0\r\n    );\r\n\r\n    await ctx.db.$transaction([\r\n      ctx.db.issuedProduct.createMany({\r\n        data: issuedItems,\r\n      }),\r\n      ctx.db.user.update({\r\n        where: { id: order.userId },\r\n        data: {\r\n          purchasedItems: {\r\n            increment: totalQuantity,\r\n          },\r\n          totalSpent: {\r\n            increment: totalAmount,\r\n          },\r\n        },\r\n      }),\r\n      ctx.db.order.delete({\r\n        where: { id: order.id },\r\n      }),\r\n    ]);\r\n\r\n    \r\n\r\n    return { success: true };\r\n  }),\r\n\r\n\r\n  declineOrder: protectedProcedure\r\n    .input(z.object({ orderId: z.string(), reason: z.string() }))\r\n    .mutation(async ({ ctx, input }) => {\r\n      const order = await ctx.db.order.findUnique({\r\n        where: { id: input.orderId },\r\n        include: {\r\n          user: true,\r\n          items: true,\r\n        },\r\n      });\r\n\r\n      if (!order || !order.user) {\r\n        throw new TRPCError({ code: \"NOT_FOUND\", message: \"Заказ не найден\" });\r\n      }\r\n\r\n      const declinedItems = order.items.map((item) => ({\r\n        userId: order.userId,\r\n        productId: item.productId,\r\n        quantity: item.quantity,\r\n        reason: input.reason,\r\n      }));\r\n\r\n      await ctx.db.declinedProduct.createMany({\r\n        data: declinedItems,\r\n      });\r\n\r\n      return { success: true, redirect: \"/productDeleviry\"  };\r\n    }),\r\n});\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 758, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/routers/reviews.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"~/server/api/trpc\";\r\n\r\nexport const reviewRouter = createTRPCRouter({\r\n  create: protectedProcedure\r\n    .input(z.object({\r\n      productId: z.string(),\r\n      userId: z.string(),\r\n      rating: z.number().min(0).max(5),\r\n      comment: z.string().min(1),\r\n      parentId: z.string().optional(),\r\n    }))\r\n    .mutation(async ({ input, ctx }) => {\r\n      return ctx.db.review.create({\r\n        data: {\r\n          productId: input.productId,\r\n          userId: input.userId,\r\n          rating: input.rating,\r\n          comment: input.comment,\r\n          parentId: input.parentId ?? null,\r\n        },\r\n        include: {\r\n          user: {\r\n            select: {\r\n              name: true,\r\n              surname: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }),\r\n\r\n  getByProduct: protectedProcedure\r\n    .input(z.object({ productId: z.string() }))\r\n    .query(({ input, ctx }) => {\r\n      return ctx.db.review.findMany({\r\n        where: {\r\n          productId: input.productId,\r\n          parentId: null,\r\n        },\r\n        include: {\r\n          user: {\r\n            select: {\r\n              name: true,\r\n              surname: true,\r\n              image: true, \r\n            },\r\n          },\r\n          replies: {\r\n            include: {\r\n              user: {\r\n                select: {\r\n                  name: true,\r\n                  surname: true,\r\n                  image: true,\r\n                },\r\n              },\r\n            },\r\n            orderBy: {\r\n              createdAt: 'asc',\r\n            },\r\n          },\r\n        },\r\n        orderBy: {\r\n          createdAt: 'desc',\r\n        },\r\n      });\r\n    }),\r\n\r\n  update: protectedProcedure\r\n    .input(z.object({\r\n      reviewId: z.string(),\r\n      comment: z.string().min(1),\r\n      rating: z.number().min(1).max(5),\r\n    }))\r\n    .mutation(async ({ input, ctx }) => {\r\n      const review = await ctx.db.review.findUnique({\r\n        where: { id: input.reviewId },\r\n      });\r\n\r\n      if (!review || review.userId !== ctx.session.user.id) {\r\n        throw new Error(\"Недостаточно прав для редактирования отзыва\");\r\n      }\r\n\r\n      return ctx.db.review.update({\r\n        where: { id: input.reviewId },\r\n        data: {\r\n          comment: input.comment,\r\n          rating: input.rating,\r\n        },\r\n      });\r\n    }),\r\n\r\n  delete: protectedProcedure\r\n    .input(z.object({ reviewId: z.string() }))\r\n    .mutation(async ({ input, ctx }) => {\r\n      const review = await ctx.db.review.findUnique({\r\n        where: { id: input.reviewId },\r\n      });\r\n\r\n      if (!review || review.userId !== ctx.session.user.id) {\r\n        throw new Error(\"Недостаточно прав для удаления отзыва\");\r\n      }\r\n\r\n      return ctx.db.review.delete({\r\n        where: { id: input.reviewId },\r\n      });\r\n    }),\r\n\r\n  longPollNewReviews: protectedProcedure\r\n    .input(z.object({\r\n      productId: z.string(),\r\n      lastReviewTimestamp: z.string().optional(), \r\n    }))\r\n    .query(async ({ input, ctx }) => {\r\n      const timeoutMs = 15 * 60 * 1000;\r\n      const startTime = Date.now();\r\n      const lastTimestamp = input.lastReviewTimestamp ? new Date(input.lastReviewTimestamp) : null;\r\n\r\n      return await new Promise(async (resolve) => {\r\n        const checkForNewReviews = async () => {\r\n          const reviews = await ctx.db.review.findMany({\r\n            where: {\r\n              productId: input.productId,\r\n              parentId: null,\r\n              ...(lastTimestamp ? { createdAt: { gt: lastTimestamp } } : {}),\r\n            },\r\n            include: {\r\n              user: {\r\n                select: { name: true, surname: true, image: true },\r\n              },\r\n              replies: {\r\n                include: {\r\n                  user: {\r\n                    select: { name: true, surname: true, image: true },\r\n                  },\r\n                },\r\n                orderBy: { createdAt: \"asc\" },\r\n              },\r\n            },\r\n            orderBy: { createdAt: \"desc\" },\r\n          });\r\n\r\n          if (reviews.length > 0) {\r\n            resolve({ reviews });\r\n          } else if (Date.now() - startTime > timeoutMs) {\r\n            resolve({ reviews: [] });\r\n          } else {\r\n            setTimeout(checkForNewReviews, 1000);\r\n          }\r\n        };\r\n\r\n        checkForNewReviews();\r\n      });\r\n    }),\r\n});\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 929, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/routers/return.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"~/server/api/trpc\";\r\nimport { TRPCError } from \"@trpc/server\";\r\n\r\nexport const returnRouter = createTRPCRouter({\r\n  /////////////////////////\r\n  create: protectedProcedure\r\n  .input(z.object({\r\n    orderId: z.string(),\r\n    reason: z.string().min(10, \"Причина должна содержать минимум 10 символов\"),\r\n    quantity: z.number().min(1, \"Количество должно быть не меньше 1\"),\r\n  }))\r\n  .mutation(async ({ input, ctx }) => {\r\n    const userId = ctx.session.user.id;\r\n\r\n    const orderItems = await ctx.db.orderItem.findMany({\r\n      where: { orderId: input.orderId },\r\n    });\r\n\r\n    const totalPurchased = orderItems.reduce((sum, item) => sum + item.quantity, 0);\r\n\r\n    const returns = await ctx.db.return.findMany({\r\n      where: { orderId: input.orderId },\r\n    });\r\n\r\n    const totalReturned = returns.reduce((sum, r) => sum + r.quantity, 0);\r\n\r\n    if (input.quantity + totalReturned > totalPurchased) {\r\n      throw new TRPCError({\r\n        code: \"BAD_REQUEST\",\r\n        message: `Нельзя вернуть больше, чем куплено. Вы уже подали заявок на ${totalReturned} из ${totalPurchased} товаров.`,\r\n      });\r\n    }\r\n\r\n    return ctx.db.return.create({\r\n      data: {\r\n        userId,\r\n        orderId: input.orderId,\r\n        reason: input.reason,\r\n        quantity: input.quantity,\r\n      },\r\n    });\r\n  }),\r\n/////////////////////////////////////////////////\r\n  getMyReturns: protectedProcedure\r\n    .query(async ({ ctx }) => {\r\n      return ctx.db.return.findMany({\r\n        where: { userId: ctx.session.user.id },\r\n        include: {\r\n          order: {\r\n            select: {\r\n              id: true,\r\n              totalAmount: true,\r\n              createdAt: true,\r\n            },\r\n          },\r\n        },\r\n        orderBy: { createdAt: \"desc\" },\r\n      });\r\n    }),\r\n\r\n  getAllReturns: protectedProcedure\r\n    .query(async ({ ctx }) => {\r\n      if (ctx.session.user.role !== \"ADMIN\") {\r\n        throw new TRPCError({ code: \"UNAUTHORIZED\" });\r\n      }\r\n\r\n      return ctx.db.return.findMany({\r\n        include: {\r\n          user: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true,\r\n            },\r\n          },\r\n          order: {\r\n            select: {\r\n              id: true,\r\n              totalAmount: true,\r\n            },\r\n          },\r\n        },\r\n        orderBy: { createdAt: \"desc\" },\r\n      });\r\n    }),\r\n\r\n  \r\n});"],"names":[],"mappings":";;;AACA;AACA;AAFA;AAEA;;;;AAEO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC3C,yBAAyB;IACzB,QAAQ,8HAAA,CAAA,qBAAkB,CACzB,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACd,SAAS,uLAAA,CAAA,IAAC,CAAC,MAAM;QACjB,QAAQ,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;QAC3B,UAAU,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,IACC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;QAC7B,MAAM,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;QAElC,MAAM,aAAa,MAAM,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;YACjD,OAAO;gBAAE,SAAS,MAAM,OAAO;YAAC;QAClC;QAEA,MAAM,iBAAiB,WAAW,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,KAAK,QAAQ,EAAE;QAE7E,MAAM,UAAU,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC3C,OAAO;gBAAE,SAAS,MAAM,OAAO;YAAC;QAClC;QAEA,MAAM,gBAAgB,QAAQ,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,QAAQ,EAAE;QAEnE,IAAI,MAAM,QAAQ,GAAG,gBAAgB,gBAAgB;YACnD,MAAM,IAAI,iTAAA,CAAA,YAAS,CAAC;gBAClB,MAAM;gBACN,SAAS,CAAC,4DAA4D,EAAE,cAAc,IAAI,EAAE,eAAe,SAAS,CAAC;YACvH;QACF;QAEA,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;YAC1B,MAAM;gBACJ;gBACA,SAAS,MAAM,OAAO;gBACtB,QAAQ,MAAM,MAAM;gBACpB,UAAU,MAAM,QAAQ;YAC1B;QACF;IACF;IACF,iDAAiD;IAC/C,cAAc,8HAAA,CAAA,qBAAkB,CAC7B,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC5B,OAAO;gBAAE,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YAAC;YACrC,SAAS;gBACP,OAAO;oBACL,QAAQ;wBACN,IAAI;wBACJ,aAAa;wBACb,WAAW;oBACb;gBACF;YACF;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;IACF;IAEF,eAAe,8HAAA,CAAA,qBAAkB,CAC9B,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS;YACrC,MAAM,IAAI,iTAAA,CAAA,YAAS,CAAC;gBAAE,MAAM;YAAe;QAC7C;QAEA,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC5B,SAAS;gBACP,MAAM;oBACJ,QAAQ;wBACN,IAAI;wBACJ,MAAM;wBACN,OAAO;oBACT;gBACF;gBACA,OAAO;oBACL,QAAQ;wBACN,IAAI;wBACJ,aAAa;oBACf;gBACF;YACF;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;IACF;AAGJ"}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/routers/product.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\nimport { db } from \"~/server/db\";\r\n\r\nexport const productRouter = createTRPCRouter({\r\n  getIssuedProducts: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        from: z.date().optional(),\r\n        to: z.date().optional(),\r\n        search: z.string().optional(),\r\n      })\r\n    )\r\n    .query(async ({ input }) => {\r\n      return await db.issuedProduct.findMany({\r\n        where: {\r\n          issuedAt: {\r\n            gte: input.from,\r\n            lte: input.to,\r\n          },\r\n          OR: input.search\r\n            ? [\r\n                { product: { name: { contains: input.search, mode: \"insensitive\" } } },\r\n                { user: { name: { contains: input.search, mode: \"insensitive\" } } },\r\n              ]\r\n            : undefined,\r\n        },\r\n        include: {\r\n          product: { select: { name: true } },\r\n          user: { select: { name: true } },\r\n        },\r\n        orderBy: { issuedAt: \"desc\" },\r\n      });\r\n    }),\r\n\r\n  getDeclinedProducts: protectedProcedure\r\n    .input(\r\n      z.object({\r\n        from: z.date().optional(),\r\n        to: z.date().optional(),\r\n        search: z.string().optional(),\r\n      })\r\n    )\r\n    .query(async ({ input }) => {\r\n      return await db.declinedProduct.findMany({\r\n        where: {\r\n          declinedAt: {\r\n            gte: input.from,\r\n            lte: input.to,\r\n          },\r\n          OR: input.search\r\n            ? [\r\n                { product: { name: { contains: input.search, mode: \"insensitive\" } } },\r\n                { user: { name: { contains: input.search, mode: \"insensitive\" } } },\r\n              ]\r\n            : undefined,\r\n        },\r\n        include: {\r\n          product: { select: { name: true } },\r\n          user: { select: { name: true } },\r\n        },\r\n        orderBy: { declinedAt: \"desc\" },\r\n      });\r\n    }),\r\n});"],"names":[],"mappings":";;;AACA;AACA;AAFA;;;;AAIO,MAAM,gBAAgB,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IAC5C,mBAAmB,8HAAA,CAAA,qBAAkB,CAClC,KAAK,CACJ,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uLAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;QACvB,IAAI,uLAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;QACrB,QAAQ,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,IAED,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;QACrB,OAAO,MAAM,qHAAA,CAAA,KAAE,CAAC,aAAa,CAAC,QAAQ,CAAC;YACrC,OAAO;gBACL,UAAU;oBACR,KAAK,MAAM,IAAI;oBACf,KAAK,MAAM,EAAE;gBACf;gBACA,IAAI,MAAM,MAAM,GACZ;oBACE;wBAAE,SAAS;4BAAE,MAAM;gCAAE,UAAU,MAAM,MAAM;gCAAE,MAAM;4BAAc;wBAAE;oBAAE;oBACrE;wBAAE,MAAM;4BAAE,MAAM;gCAAE,UAAU,MAAM,MAAM;gCAAE,MAAM;4BAAc;wBAAE;oBAAE;iBACnE,GACD;YACN;YACA,SAAS;gBACP,SAAS;oBAAE,QAAQ;wBAAE,MAAM;oBAAK;gBAAE;gBAClC,MAAM;oBAAE,QAAQ;wBAAE,MAAM;oBAAK;gBAAE;YACjC;YACA,SAAS;gBAAE,UAAU;YAAO;QAC9B;IACF;IAEF,qBAAqB,8HAAA,CAAA,qBAAkB,CACpC,KAAK,CACJ,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uLAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;QACvB,IAAI,uLAAA,CAAA,IAAC,CAAC,IAAI,GAAG,QAAQ;QACrB,QAAQ,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,IAED,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;QACrB,OAAO,MAAM,qHAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;YACvC,OAAO;gBACL,YAAY;oBACV,KAAK,MAAM,IAAI;oBACf,KAAK,MAAM,EAAE;gBACf;gBACA,IAAI,MAAM,MAAM,GACZ;oBACE;wBAAE,SAAS;4BAAE,MAAM;gCAAE,UAAU,MAAM,MAAM;gCAAE,MAAM;4BAAc;wBAAE;oBAAE;oBACrE;wBAAE,MAAM;4BAAE,MAAM;gCAAE,UAAU,MAAM,MAAM;gCAAE,MAAM;4BAAc;wBAAE;oBAAE;iBACnE,GACD;YACN;YACA,SAAS;gBACP,SAAS;oBAAE,QAAQ;wBAAE,MAAM;oBAAK;gBAAE;gBAClC,MAAM;oBAAE,QAAQ;wBAAE,MAAM;oBAAK;gBAAE;YACjC;YACA,SAAS;gBAAE,YAAY;YAAO;QAChC;IACF;AACJ"}},
    {"offset": {"line": 1139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1145, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/routers/ticket.ts"],"sourcesContent":["// // import { z } from \"zod\";\r\n// // import { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\n// // import { TicketStatus } from \"@prisma/client\";\r\n\r\n// // export const ticketRouter = createTRPCRouter({\r\n// //   createTicket: protectedProcedure\r\n// //     .input(\r\n// //       z.object({\r\n// //         subject: z.string().min(1, \"Тема обязательна\"),\r\n// //         description: z.string().min(1, \"Описание обязательно\"),\r\n// //       })\r\n// //     )\r\n// //     .mutation(async ({ ctx, input }) => {\r\n// //       return ctx.db.supportTicket.create({\r\n// //         data: {\r\n// //           userId: ctx.session.user.id,\r\n// //           subject: input.subject,\r\n// //           description: input.description,\r\n// //           status: \"Sent\",\r\n// //         },\r\n// //       });\r\n// //     }),\r\n\r\n// //   // Добавить сообщение в тикет\r\n// // addMessage: protectedProcedure\r\n// //   .input(\r\n// //     z.object({\r\n// //       ticketId: z.string().optional(),\r\n// //       message: z.string(),\r\n// //       subject: z.string().optional(),\r\n// //       description: z.string().optional(),\r\n// //     })\r\n// //   )\r\n// //   .mutation(async ({ ctx, input }) => {\r\n// //     let ticketId = input.ticketId;\r\n\r\n// //     // Проверка: существует ли тикет\r\n// //     if (ticketId) {\r\n// //       const existing = await ctx.db.supportTicket.findUnique({\r\n// //         where: { id: ticketId },\r\n// //       });\r\n\r\n// //       if (!existing) {\r\n// //         ticketId = undefined; // сбрасываем, чтобы создать новый\r\n// //       }\r\n// //     }\r\n\r\n// //     // Если тикета нет — создаём его\r\n// //     if (!ticketId) {\r\n// //       const newTicket = await ctx.db.supportTicket.create({\r\n// //         data: {\r\n// //           userId: ctx.session.user.id,\r\n// //           subject: input.subject ?? 'Без темы',\r\n// //           description: input.description ?? '',\r\n// //           status: 'Sent',\r\n// //         },\r\n// //       });\r\n\r\n// //       ticketId = newTicket.id;\r\n// //     }\r\n\r\n// //     // Создаём сообщение\r\n// //     const newMessage = await ctx.db.supportTicketMessage.create({\r\n// //       data: {\r\n// //         ticketId,\r\n// //         userId: ctx.session.user.id,\r\n// //         message: input.message,\r\n// //         supportAgent: false,\r\n// //       },\r\n// //     });\r\n\r\n// //     return {\r\n// //       message: newMessage,\r\n// //       ticketId,\r\n// //     };\r\n// //   }),\r\n\r\n// //   // Получить тикет по ID\r\n// //   getTicketById: protectedProcedure\r\n// //     .input(z.object({ ticketId: z.string() }))\r\n// //     .query(async ({ ctx, input }) => {\r\n// //       return ctx.db.supportTicket.findUnique({\r\n// //         where: { id: input.ticketId },\r\n// //         include: {\r\n// //           messages: {\r\n// //             orderBy: { createdAt: \"asc\" },\r\n// //             include: {\r\n// //               user: {\r\n// //                 select: {\r\n// //                   id: true,\r\n// //                   name: true,\r\n// //                   image: true,\r\n// //                 },\r\n// //               },\r\n// //             },\r\n// //           },\r\n// //           user: {\r\n// //             select: {\r\n// //               id: true,\r\n// //               name: true,\r\n// //               image: true,\r\n// //             },\r\n// //           },\r\n// //         },\r\n// //       });\r\n// //     }),\r\n\r\n// //   // Получить все тикеты пользователя\r\n// //   getUserTickets: protectedProcedure.query(async ({ ctx }) => {\r\n// //     return ctx.db.supportTicket.findMany({\r\n// //       where: { userId: ctx.session.user.id },\r\n// //       orderBy: { createdAt: \"desc\" },\r\n// //     });\r\n// //   }),\r\n\r\n// //   // Административные методы\r\n\r\n// //   // Получить все тикеты (для админов)\r\n// //   getAllTickets: protectedProcedure\r\n// //     .input(\r\n// //       z.object({\r\n// //         status: z.nativeEnum(TicketStatus).optional(),\r\n// //       })\r\n// //     )\r\n// //     .query(async ({ ctx, input }) => {\r\n// //       // Здесь должна быть проверка на админа\r\n// //       return ctx.db.supportTicket.findMany({\r\n// //         where: {\r\n// //           status: input.status,\r\n// //         },\r\n// //         orderBy: { createdAt: \"desc\" },\r\n// //         include: {\r\n// //           user: {\r\n// //             select: {\r\n// //               id: true,\r\n// //               name: true,\r\n// //             },\r\n// //           },\r\n// //         },\r\n// //       });\r\n// //     }),\r\n\r\n// //   // Ответить на тикет от имени поддержки\r\n// //   addAdminReply: protectedProcedure\r\n// //     .input(\r\n// //       z.object({\r\n// //         ticketId: z.string(),\r\n// //         message: z.string().min(1, \"Сообщение не может быть пустым\"),\r\n// //       })\r\n// //     )\r\n// //     .mutation(async ({ ctx, input }) => {\r\n// //       // Проверка прав администратора\r\n// //       // if (!ctx.session.user.isAdmin) throw new Error(\"Недостаточно прав\");\r\n\r\n// //       // Обновляем статус тикета\r\n// //       await ctx.db.supportTicket.update({\r\n// //         where: { id: input.ticketId },\r\n// //         data: {\r\n// //           status: \"Read\",\r\n// //           updatedAt: new Date(),\r\n// //         },\r\n// //       });\r\n\r\n// //       // Добавляем сообщение от поддержки\r\n// //       return ctx.db.supportTicketMessage.create({\r\n// //         data: {\r\n// //           ticketId: input.ticketId,\r\n// //           userId: ctx.session.user.id,\r\n// //           message: input.message,\r\n// //           supportAgent: true,\r\n// //         },\r\n// //       });\r\n// //     }),\r\n\r\n// //   // Изменить статус тикета\r\n// //   updateTicketStatus: protectedProcedure\r\n// //     .input(\r\n// //       z.object({\r\n// //         ticketId: z.string(),\r\n// //         status: z.nativeEnum(TicketStatus),\r\n// //       })\r\n// //     )\r\n// //     .mutation(async ({ ctx, input }) => {\r\n// //       // Проверка прав администратора\r\n// //       // if (!ctx.session.user.isAdmin) throw new Error(\"Недостаточно прав\");\r\n\r\n// //       return ctx.db.supportTicket.update({\r\n// //         where: { id: input.ticketId },\r\n// //         data: {\r\n// //           status: input.status,\r\n// //           updatedAt: new Date(),\r\n// //         },\r\n// //       });\r\n// //     }),\r\n// // });\r\n// import { z } from \"zod\";\r\n// import { createTRPCRouter, protectedProcedure } from \"../trpc\";\r\n// import { TRPCError } from \"@trpc/server\";\r\n// import { TicketStatus } from \"@prisma/client\";\r\n\r\n// // Middleware для админов\r\nconst adminProcedure = protectedProcedure.use(({ ctx, next }) => {\r\n  if (ctx.session.user.role !== \"ADMIN\") {\r\n    throw new TRPCError({ code: \"FORBIDDEN\", message: \"Недостаточно прав\" });\r\n  }\r\n  return next();\r\n});\r\n\r\n// export const ticketRouter = createTRPCRouter({\r\n//   // Создание тикета\r\n//   createTicket: protectedProcedure\r\n//     .input(\r\n//       z.object({\r\n//         subject: z.string().min(1, \"Тема обязательна\"),\r\n//         description: z.string().min(1, \"Описание обязательно\"),\r\n//       })\r\n//     )\r\n//     .mutation(async ({ ctx, input }) => {\r\n//       return ctx.db.supportTicket.create({\r\n//         data: {\r\n//           userId: ctx.session.user.id,\r\n//           subject: input.subject,\r\n//           description: input.description,\r\n//           status: TicketStatus.Sent,\r\n//         },\r\n//       });\r\n//     }),\r\n\r\n//   // Добавление сообщения\r\n//   addMessage: protectedProcedure\r\n//     .input(\r\n//       z.object({\r\n//         ticketId: z.string().optional(),\r\n//         message: z.string().min(1, \"Сообщение обязательно\"),\r\n//         subject: z.string().optional(),\r\n//         description: z.string().optional(),\r\n//       })\r\n//     )\r\n//     .mutation(async ({ ctx, input }) => {\r\n//       let ticketId = input.ticketId;\r\n\r\n//       if (ticketId) {\r\n//         const existing = await ctx.db.supportTicket.findUnique({\r\n//           where: { id: ticketId },\r\n//         });\r\n\r\n//         if (!existing) {\r\n//           ticketId = undefined;\r\n//         }\r\n//       }\r\n\r\n//       // Если тикета нет — создаём новый, проверяя наличие темы и описания\r\n//       if (!ticketId) {\r\n//         if (!input.subject || !input.description) {\r\n//           throw new TRPCError({\r\n//             code: \"BAD_REQUEST\",\r\n//             message: \"Тема и описание обязательны при создании нового тикета\",\r\n//           });\r\n//         }\r\n\r\n//         const newTicket = await ctx.db.supportTicket.create({\r\n//           data: {\r\n//             userId: ctx.session.user.id,\r\n//             subject: input.subject,\r\n//             description: input.description,\r\n//             status: TicketStatus.Sent,\r\n//           },\r\n//         });\r\n\r\n//         ticketId = newTicket.id;\r\n//       }\r\n\r\n//       const newMessage = await ctx.db.supportTicketMessage.create({\r\n//         data: {\r\n//           ticketId,\r\n//           userId: ctx.session.user.id,\r\n//           message: input.message,\r\n//           supportAgent: false,\r\n//         },\r\n//       });\r\n\r\n//       return {\r\n//         message: newMessage,\r\n//         ticketId,\r\n//       };\r\n//     }),\r\n\r\n//   // Получить тикет по ID\r\n//   getTicketById: protectedProcedure\r\n//     .input(z.object({ ticketId: z.string() }))\r\n//     .query(async ({ ctx, input }) => {\r\n//       return ctx.db.supportTicket.findUnique({\r\n//         where: { id: input.ticketId },\r\n//         include: {\r\n//           messages: {\r\n//             orderBy: { createdAt: \"asc\" },\r\n//             include: {\r\n//               user: {\r\n//                 select: {\r\n//                   id: true,\r\n//                   name: true,\r\n//                   image: true,\r\n//                 },\r\n//               },\r\n//             },\r\n//           },\r\n//           user: {\r\n//             select: {\r\n//               id: true,\r\n//               name: true,\r\n//               image: true,\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n//     }),\r\n\r\n//   // Получить тикеты текущего пользователя\r\n//   getUserTickets: protectedProcedure.query(async ({ ctx }) => {\r\n//     return ctx.db.supportTicket.findMany({\r\n//       where: { userId: ctx.session.user.id },\r\n//       orderBy: { createdAt: \"desc\" },\r\n//     });\r\n//   }),\r\n\r\n//   // Админ: получить все тикеты\r\n//   getAllTickets: adminProcedure\r\n//     .input(z.object({ status: z.nativeEnum(TicketStatus).optional() }))\r\n//     .query(async ({ ctx, input }) => {\r\n//       return ctx.db.supportTicket.findMany({\r\n//         where: {\r\n//           status: input.status,\r\n//         },\r\n//         orderBy: { createdAt: \"desc\" },\r\n//         include: {\r\n//           user: {\r\n//             select: {\r\n//               id: true,\r\n//               name: true,\r\n//             },\r\n//           },\r\n//         },\r\n//       });\r\n//     }),\r\n\r\n//   // Админ: ответить на тикет\r\n//   addAdminReply: adminProcedure\r\n//     .input(\r\n//       z.object({\r\n//         ticketId: z.string(),\r\n//         message: z.string().min(1, \"Сообщение не может быть пустым\"),\r\n//       })\r\n//     )\r\n//     .mutation(async ({ ctx, input }) => {\r\n//       await ctx.db.supportTicket.update({\r\n//         where: { id: input.ticketId },\r\n//         data: {\r\n//           status: TicketStatus.Read,\r\n//           updatedAt: new Date(),\r\n//         },\r\n//       });\r\n\r\n//       return ctx.db.supportTicketMessage.create({\r\n//         data: {\r\n//           ticketId: input.ticketId,\r\n//           userId: ctx.session.user.id,\r\n//           message: input.message,\r\n//           supportAgent: true,\r\n//         },\r\n//       });\r\n//     }),\r\n\r\n//   // Админ: изменить статус тикета\r\n  // updateTicketStatus: adminProcedure\r\n  //   .input(\r\n  //     z.object({\r\n  //       ticketId: z.string(),\r\n  //       status: z.nativeEnum(TicketStatus),\r\n  //     })\r\n  //   )\r\n  //   .mutation(async ({ ctx, input }) => {\r\n  //     return ctx.db.supportTicket.update({\r\n  //       where: { id: input.ticketId },\r\n  //       data: {\r\n  //         status: input.status,\r\n  //         updatedAt: new Date(),\r\n  //       },\r\n  //     });\r\n  //   }),\r\n// // });\r\nimport { z } from \"zod\";\r\nimport { TRPCError } from \"@trpc/server\";\r\nimport { protectedProcedure } from \"../trpc\";\r\n\r\nexport const supportTicketRouter = {\r\n  getTicketById: protectedProcedure\r\n    .input(z.object({ ticketId: z.string() }))\r\n    .query(async ({ ctx, input }) => {\r\n      const ticket = await ctx.db.supportTicket.findUnique({\r\n        where: { id: input.ticketId },\r\n        include: {\r\n          messages: {\r\n            orderBy: { createdAt: \"asc\" },\r\n            include: {\r\n              user: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  image: true,\r\n                },\r\n              },\r\n            },\r\n          },\r\n          user: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              image: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      if (!ticket) {\r\n        throw new TRPCError({ code: \"NOT_FOUND\", message: \"Ticket not found\" });\r\n      }\r\n\r\n      // Если админ, обновляем сообщения пользователя (supportAgent=false) со статусом Sent на Read\r\n      if (ctx.session.user.role === \"ADMIN\") {\r\n        await ctx.db.supportTicketMessage.updateMany({\r\n          where: {\r\n            ticketId: ticket.id,\r\n            supportAgent: false,\r\n            statusMessage: \"Sent\",\r\n          },\r\n          data: {\r\n            statusMessage: \"Read\",\r\n          },\r\n        });\r\n      }\r\n\r\n      return ticket;\r\n    }),\r\n\r\n  getAllTickets: adminProcedure.query(async ({ ctx }) => {\r\n    const tickets = await ctx.db.supportTicket.findMany({\r\n      where: {\r\n        messages: {\r\n          some: {\r\n            supportAgent: false,\r\n            statusMessage: \"Sent\",\r\n          },\r\n        },\r\n      },\r\n      orderBy: { updatedAt: \"desc\" },\r\n      include: {\r\n        user: {\r\n          select: { id: true, name: true },\r\n        },\r\n        messages: {\r\n          orderBy: { createdAt: \"desc\" },\r\n          take: 1,\r\n        },\r\n      },\r\n    });\r\n\r\n    return tickets;\r\n  }),\r\n};\r\n\r\n// import { z } from \"zod\";\r\n// import { protectedProcedure } from \"../trpc\";\r\n// import { TRPCError } from \"@trpc/server\";\r\n\r\n// export const supportTicketRouter = {\r\n//   // ✔️ Получение тикета\r\n  \r\n//   getTicketById: protectedProcedure\r\n//     .input(z.object({ ticketId: z.string() }))\r\n//     .query(async ({ ctx, input }) => {\r\n//       const ticket = await ctx.db.supportTicket.findUnique({\r\n//         where: { id: input.ticketId },\r\n//         include: {\r\n//           messages: {\r\n//             orderBy: { createdAt: \"asc\" },\r\n//             include: {\r\n//               user: { select: { id: true, name: true, image: true } },\r\n//             },\r\n//           },\r\n//           user: { select: { id: true, name: true, image: true } },\r\n//         },\r\n//       });\r\n\r\n//       if (!ticket) {\r\n//         throw new TRPCError({ code: \"NOT_FOUND\", message: \"Ticket not found\" });\r\n//       }\r\n\r\n//       if (ctx.session.user.role === \"ADMIN\") {\r\n//         await ctx.db.supportTicketMessage.updateMany({\r\n//           where: {\r\n//             ticketId: ticket.id,\r\n//             supportAgent: false,\r\n//             statusMessage: \"Sent\",\r\n//           },\r\n//           data: { statusMessage: \"Read\" },\r\n//         });\r\n//       }\r\n\r\n//       return ticket;\r\n//     }),\r\n\r\n//   // ✔️ Добавление нового сообщения\r\n//   addMessage: protectedProcedure\r\n//     .input(\r\n//       z.object({\r\n//         ticketId: z.string(),\r\n//         message: z.string().min(1),\r\n//       })\r\n//     )\r\n//     .mutation(async ({ ctx, input }) => {\r\n//       const userId = ctx.session.user.id;\r\n//       const role = ctx.session.user.role;\r\n//       const supportAgent = role === \"ADMIN\" || role === \"WORKER\";\r\n\r\n//       await ctx.db.supportTicketMessage.create({\r\n//         data: {\r\n//           ticketId: input.ticketId,\r\n//           userId,\r\n//           message: input.message,\r\n//           supportAgent,\r\n//           statusMessage: supportAgent ? \"Read\" : \"Sent\",\r\n//         },\r\n//       });\r\n\r\n//       await ctx.db.supportTicket.update({\r\n//         where: { id: input.ticketId },\r\n//         data: {\r\n//           updatedAt: new Date(),\r\n//         },\r\n//       });\r\n\r\n//       return { success: true };\r\n//     }),\r\n\r\n//   // ✔️ Обновление статуса тикета\r\n//   updateTicketStatus: protectedProcedure\r\n//     .input(\r\n//       z.object({\r\n//         ticketId: z.string(),\r\n//         status: z.enum([\"Sent\", \"Read\"]),\r\n//       })\r\n//     )\r\n//     .mutation(async ({ ctx, input }) => {\r\n//       const role = ctx.session.user.role;\r\n//       const supportAgent = role === \"ADMIN\" || role === \"WORKER\";\r\n\r\n//       await ctx.db.supportTicketMessage.updateMany({\r\n//         where: {\r\n//           ticketId: input.ticketId,\r\n//           supportAgent: !supportAgent,\r\n//           statusMessage: input.status === \"Read\" ? \"Sent\" : \"Read\",\r\n//         },\r\n//         data: {\r\n//           statusMessage: input.status,\r\n//         },\r\n//       });\r\n\r\n//       return { success: true };\r\n//     }),\r\n\r\n//   // ✔️ Получение всех тикетов\r\n//   getAllTickets: adminProcedure.query(async ({ ctx }) => {\r\n//     const tickets = await ctx.db.supportTicket.findMany({\r\n//       where: {\r\n//         messages: {\r\n//           some: {\r\n//             supportAgent: false,\r\n//             statusMessage: \"Sent\",\r\n//           },\r\n//         },\r\n//       },\r\n//       orderBy: { updatedAt: \"desc\" },\r\n//       include: {\r\n//         user: { select: { id: true, name: true } },\r\n//         messages: { orderBy: { createdAt: \"desc\" }, take: 1 },\r\n//       },\r\n//     });\r\n\r\n//     return tickets;\r\n//   }),\r\n// };\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1705, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1711, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/api/root.ts"],"sourcesContent":["import { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\nimport { orderRouter } from \"./routers/order\";\nimport { reviewRouter } from \"./routers/reviews\";\nimport { returnRouter } from \"./routers/return\";\nimport { productRouter } from \"./routers/product\";\nimport { supportTicketRouter } from \"./routers/ticket\";\n// import { ticketRouter } from \"./routers/ticket\";\n// import { uploadRouter } from \"./routers/image\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  order: orderRouter,\n  review: reviewRouter,\n  return: returnRouter,\n  product: productRouter,\n  ticket: supportTicketRouter,\n  // upload: uploadRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AASO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,OAAO,0IAAA,CAAA,cAAW;IAClB,QAAQ,4IAAA,CAAA,eAAY;IACpB,QAAQ,2IAAA,CAAA,eAAY;IACpB,SAAS,4IAAA,CAAA,gBAAa;IACtB,QAAQ,2IAAA,CAAA,sBAAmB;AAE7B;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 1735, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1741, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { type NextRequest } from \"next/server\";\n\nimport { env } from \"~/env\";\nimport { appRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a HTTP request (e.g. when you make requests from Client Components).\n */\nconst createContext = async (req: NextRequest) => {\n  return createTRPCContext({\n    headers: req.headers,\n  });\n};\n\nconst handler = (req: NextRequest) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req,\n    router: appRouter,\n    createContext: () => createContext(req),\n    onError:\n      env.NODE_ENV === \"development\"\n        ? ({ path, error }) => {\n            console.error(\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\n            );\n          }\n        : undefined,\n  });\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;AALA;;;;;AAOA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,4RAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR"}},
    {"offset": {"line": 1772, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}