// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    surname       String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    totalSpent    Decimal   @default(0.0)
    purchasedItems Int      @default(0)
    
    accounts      Account[]
    sessions      Session[]
    orders        Order[]
    cartItems     CartItem[]
    reviews       Review[]
    returns       Return[]

    role  Role @default(USER)
    issuedProducts   IssuedProduct[]
    declinedProducts DeclinedProduct[]

     SupportTicket SupportTicket[]

     SupportTicketMessage SupportTicketMessage[]
}
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Product { //Продукт
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  IssuedProduct IssuedProduct[]
  DeclinedProduct DeclinedProduct[]

  images      ProductImage[]  
}

model ProductImage {// Изображения продукта
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  url        String   
  createdAt  DateTime @default(now())
}

model Category { // Категории товаров
    id          String    @id @default(cuid())
    name        String    @unique
    products    Product[]
}

model CartItem {// Корзина пользователя
    id        String   @id @default(cuid())
    userId    String
    productId String
    quantity  Int      @default(1)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id])
}

model Order { // Заказы
    id          String   @id @default(cuid())
    userId      String
    totalAmount Decimal
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    items       OrderItem[]
    returns     Return[]
}

model OrderItem {//История заказов
    id        String   @id @default(cuid())
    orderId   String?
    productId String
    quantity  Int
    price     Decimal
    order     Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id])
}

model Return {// Возвраты
    id        String   @id @default(cuid())
    userId    String
    orderId   String
    reason    String
    quantity  Int
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
} 

model Review { // ОТзывы
  id         String    @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  parentId   String?   
  parent     Review?   @relation("ReviewReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Review[]  @relation("ReviewReplies")
}

enum Role { // Роли
  USER
  WORKER
  ADMIN
}

model IssuedProduct { // Выданные товары
  id          String   @id @default(cuid())
  userId      String
  productId   String
  quantity    Int      @default(1)
  issuedAt    DateTime @default(now())
  comment     String?  

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
}

model DeclinedProduct {// Отказанные товары
  id          String   @id @default(cuid())
  userId      String
  productId   String
  quantity    Int      @default(1)
  declinedAt  DateTime @default(now())
  reason      String   

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
}

model PlaceholderImage { // Для пустых страниц
  id        String   @id @default(cuid())
  name      String   
  imageUrl  String   
}

enum MessageStatus { // Статус сообщения
  Read
  Sent
}

model SupportTicket { // Переписка с технической поддержкой
  id          String              @id @default(cuid())
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    SupportTicketMessage[]
}

model SupportTicketMessage {
  id           String            @id @default(cuid())
  ticketId     String
  userId       String
  message      String
  createdAt    DateTime          @default(now())
  supportAgent Boolean           @default(false)
  statusMessage       MessageStatus      @default(Sent)
  ticket       SupportTicket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}