{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/mailers/auth-mailer.ts"],"sourcesContent":["import { createTransport } from \"nodemailer\"\r\nimport type { NodemailerConfig } from \"next-auth/providers/nodemailer\";\r\n\r\ntype SendVerificationRequestParams = \r\n    Parameters<NodemailerConfig[\"sendVerificationRequest\"]>[0] \r\n\r\nexport async function sendVerificationRequest(params: SendVerificationRequestParams) {\r\n  const { identifier, url, provider, theme } = params\r\n  const { host } = new URL(url)\r\n  // NOTE: You are not required to use `nodemailer`, use whatever you want.\r\n  const transport = createTransport(provider.server)\r\n  const result = await transport.sendMail({\r\n    to: identifier,\r\n    from: provider.from,\r\n    subject: `Sign in to ${host}`,\r\n    text: text({ url, host }),\r\n    html: html({ url, host, theme }),\r\n  })\r\n  const failed = result.rejected.concat(result.pending).filter(Boolean)\r\n  if (failed.length) {\r\n    throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`)\r\n  }\r\n}\r\n\r\n/**\r\n * Email HTML body\r\n * Insert invisible space into domains from being turned into a hyperlink by email\r\n * clients like Outlook and Apple mail, as this is confusing because it seems\r\n * like they are supposed to click on it to sign in.\r\n *\r\n * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!\r\n */\r\nfunction html(params: { url: string, host: string, theme: { brandColor?: string, buttonText?: string} }) {\r\n  const { url, host, theme } = params\r\n\r\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\r\n\r\n  const brandColor = theme.brandColor ?? \"#346df1\"\r\n  const color = {\r\n    background: \"#f9f9f9\",\r\n    text: \"#444\",\r\n    mainBackground: \"#fff\",\r\n    buttonBackground: brandColor,\r\n    buttonBorder: brandColor,\r\n    buttonText: theme.buttonText ?? \"#fff\",\r\n  }\r\n\r\n  return `\r\n<body style=\"background: ${color.background};\">\r\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\r\n    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\r\n    <tr>\r\n      <td align=\"center\"\r\n        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\r\n        Sign in to <strong>${escapedHost}</strong>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" style=\"padding: 20px 0;\">\r\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n          <tr>\r\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\r\n                target=\"_blank\"\r\n                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\r\n                in</a></td>\r\n          </tr>\r\n        </table>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\"\r\n        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\r\n        If you did not request this email you can safely ignore it.\r\n      </td>\r\n    </tr>\r\n  </table>\r\n</body>\r\n`\r\n}\r\n\r\n/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */\r\nfunction text({ url, host }: { url: string, host: string }) {\r\n  return `Sign in to ${host}\\n${url}\\n\\n`\r\n}"],"names":[],"mappings":";;;AAAA;;AAMO,eAAe,wBAAwB,MAAqC;IACjF,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;IAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI;IACzB,yEAAyE;IACzE,MAAM,YAAY,CAAA,GAAA,yMAAA,CAAA,kBAAe,AAAD,EAAE,SAAS,MAAM;IACjD,MAAM,SAAS,MAAM,UAAU,QAAQ,CAAC;QACtC,IAAI;QACJ,MAAM,SAAS,IAAI;QACnB,SAAS,CAAC,WAAW,EAAE,MAAM;QAC7B,MAAM,KAAK;YAAE;YAAK;QAAK;QACvB,MAAM,KAAK;YAAE;YAAK;YAAM;QAAM;IAChC;IACA,MAAM,SAAS,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,OAAO,EAAE,MAAM,CAAC;IAC7D,IAAI,OAAO,MAAM,EAAE;QACjB,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE,OAAO,IAAI,CAAC,MAAM,mBAAmB,CAAC;IACrE;AACF;AAEA;;;;;;;CAOC,GACD,SAAS,KAAK,MAAyF;IACrG,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;IAE7B,MAAM,cAAc,KAAK,OAAO,CAAC,OAAO;IAExC,MAAM,aAAa,MAAM,UAAU,IAAI;IACvC,MAAM,QAAQ;QACZ,YAAY;QACZ,MAAM;QACN,gBAAgB;QAChB,kBAAkB;QAClB,cAAc;QACd,YAAY,MAAM,UAAU,IAAI;IAClC;IAEA,OAAO,CAAC;yBACe,EAAE,MAAM,UAAU,CAAC;;uBAErB,EAAE,MAAM,cAAc,CAAC;;;qGAGuD,EAAE,MAAM,IAAI,CAAC;2BACvF,EAAE,YAAY;;;;;;;oEAO2B,EAAE,MAAM,gBAAgB,CAAC,WAAW,EAAE,IAAI;;0FAEpB,EAAE,MAAM,UAAU,CAAC,mFAAmF,EAAE,MAAM,YAAY,CAAC;;;;;;;;gIAQrF,EAAE,MAAM,IAAI,CAAC;;;;;;AAM7I,CAAC;AACD;AAEA,6FAA6F,GAC7F,SAAS,KAAK,EAAE,GAAG,EAAE,IAAI,EAAiC;IACxD,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE,IAAI,IAAI,CAAC;AACzC"}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string()\n        : z.string().optional(),\n    EMAIL_SERVER: z.string(),\n    EMAIL_FROM: z.string(),\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    AUTH_SECRET: process.env.AUTH_SECRET,\n    EMAIL_SERVER: process.env.EMAIL_SERVER,\n    EMAIL_FROM: process.env.EMAIL_FROM,\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,uRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,aACE,6EAEI,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACzB,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM;QACtB,YAAY,uLAAA,CAAA,IAAC,CAAC,MAAM;QACpB,cAAc,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,uLAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;IACb;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,YAAY,QAAQ,GAAG,CAAC,UAAU;QAClC,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;IACV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/auth/config.ts"],"sourcesContent":["// import { PrismaAdapter } from \"@auth/prisma-adapter\";\n// import { type DefaultSession, type NextAuthConfig } from \"next-auth\";\n// import EmailProvider from \"next-auth/providers/nodemailer\";\n// import DiscordProvider from \"next-auth/providers/discord\";\n\n// import { db } from \"~/server/db\";\n// import { sendVerificationRequest } from \"~/mailers/auth-mailer\";\n// import { $Enums } from \"@prisma/client\";\n\n// /**\n//  * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n//  * object and keep type safety.\n//  *\n//  * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n//  */\n// // declare module \"next-auth\" {\n// //   interface Session extends DefaultSession {\n// //     user: {\n// //       id: string;\n// //       // ...other properties\n// //       // role: UserRole;\n// //     } & DefaultSession[\"user\"];\n// //   }\n// declare module \"next-auth\" {\n//   interface Session extends DefaultSession {\n//     user: {\n//       id: string;\n//       // ...other properties\n//       role: $Enums.Role;\n//     } & DefaultSession[\"user\"];\n//   }\n\n//   // interface User {\n//   //   // ...other properties\n//   //   // role: UserRole;\n//   // }\n// }\n\n// /**\n//  * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n//  *\n//  * @see https://next-auth.js.org/configuration/options\n//  */\n// export const authConfig = {\n//   providers: [\n//     EmailProvider({\n//       server: process.env.EMAIL_SERVER,\n//       from: process.env.EMAIL_FROM,\n//       sendVerificationRequest: sendVerificationRequest,\n//     })\n//   ],\n//   adapter: PrismaAdapter(db),\n//   callbacks: {\n//     session: ({ session, user }) => ({\n//       ...session,\n//       user: {\n//         ...session.user,\n//         id: user.id,\n//       },\n//     }),\n//   },\n// } satisfies NextAuthConfig;\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { $Enums } from \"@prisma/client\";\nimport { type DefaultSession, type NextAuthConfig } from \"next-auth\";\nimport EmailProvider from \"next-auth/providers/nodemailer\";\nimport { sendVerificationRequest } from \"~/mailers/auth-mailer\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      // ...other properties\n      role: $Enums.Role;\n    } & DefaultSession[\"user\"];\n  }\n\n  // interface User {\n  //   // ...other properties\n  //   // role: UserRole;\n  // }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authConfig = {\n  providers: [\n    EmailProvider({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n      sendVerificationRequest: sendVerificationRequest,\n    })\n  ],\n  adapter: PrismaAdapter(db),\n  callbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n} satisfies NextAuthConfig;"],"names":[],"mappings":"AAAA,wDAAwD;AACxD,wEAAwE;AACxE,8DAA8D;AAC9D,6DAA6D;AAE7D,oCAAoC;AACpC,mEAAmE;AACnE,2CAA2C;AAE3C,MAAM;AACN,oGAAoG;AACpG,kCAAkC;AAClC,KAAK;AACL,kFAAkF;AAClF,MAAM;AACN,kCAAkC;AAClC,kDAAkD;AAClD,iBAAiB;AACjB,uBAAuB;AACvB,kCAAkC;AAClC,8BAA8B;AAC9B,qCAAqC;AACrC,SAAS;AACT,+BAA+B;AAC/B,+CAA+C;AAC/C,cAAc;AACd,oBAAoB;AACpB,+BAA+B;AAC/B,2BAA2B;AAC3B,kCAAkC;AAClC,MAAM;AAEN,wBAAwB;AACxB,gCAAgC;AAChC,4BAA4B;AAC5B,SAAS;AACT,IAAI;AAEJ,MAAM;AACN,oFAAoF;AACpF,KAAK;AACL,yDAAyD;AACzD,MAAM;AACN,8BAA8B;AAC9B,iBAAiB;AACjB,sBAAsB;AACtB,0CAA0C;AAC1C,sCAAsC;AACtC,0DAA0D;AAC1D,SAAS;AACT,OAAO;AACP,gCAAgC;AAChC,iBAAiB;AACjB,yCAAyC;AACzC,oBAAoB;AACpB,gBAAgB;AAChB,2BAA2B;AAC3B,uBAAuB;AACvB,WAAW;AACX,UAAU;AACV,OAAO;AACP,8BAA8B;;;;AAC9B;AAGA;AACA;AAEA;AAHA;;;;;AA+BO,MAAM,aAAa;IACxB,WAAW;QACT,CAAA,GAAA,kPAAA,CAAA,UAAa,AAAD,EAAE;YACZ,QAAQ,QAAQ,GAAG,CAAC,YAAY;YAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,yBAAyB,kIAAA,CAAA,0BAAuB;QAClD;KACD;IACD,SAAS,CAAA,GAAA,mQAAA,CAAA,gBAAa,AAAD,EAAE,qHAAA,CAAA,KAAE;IACzB,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAK,CAAC;gBAC/B,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,KAAK,EAAE;gBACb;YACF,CAAC;IACH;AACF"}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/server/auth/index.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { cache } from \"react\";\n\nimport { authConfig } from \"./config\";\n\nconst { auth: uncachedAuth, handlers, signIn, signOut } = NextAuth(authConfig);\n\nconst auth = cache(uncachedAuth);\n\nexport { auth, handlers, signIn, signOut };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;AAHA;;;;AAKA,MAAM,EAAE,MAAM,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,mQAAA,CAAA,UAAQ,AAAD,EAAE,iIAAA,CAAA,aAAU;AAE7E,MAAM,OAAO,CAAA,GAAA,sTAAA,CAAA,QAAK,AAAD,EAAE"}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/KRB2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"~/server/auth\";\n\nexport const { GET, POST } = handlers;\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,gIAAA,CAAA,WAAQ"}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}