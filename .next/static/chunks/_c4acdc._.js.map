{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/api/action/product.ts"],"sourcesContent":["// \"use server\";\r\n\r\n// import { revalidatePath } from \"next/cache\";\r\n// import { redirect } from \"next/navigation\";\r\n// import { z } from \"zod\";\r\n// import { auth } from \"~/server/auth\";\r\n// import { db } from \"~/server/db\";\r\n// import { createClient } from '@supabase/supabase-js';\r\n// export async function createProduct(formData: FormData) {\r\n//   const fd = z\r\n//     .object({\r\n//       name: z.string(),\r\n//       description: z.string(),\r\n//       price: z.coerce.number().positive(),\r\n//       imageUrl: z.string().url().optional().or(z.literal(\"\")),\r\n//       categoryId: z.string(),\r\n//     })\r\n//     .parse({\r\n//       name: formData.get(\"name\"),\r\n//       description: formData.get(\"description\"),\r\n//       price: formData.get(\"price\"),\r\n//       imageUrl: formData.get(\"imageUrl\"),\r\n//       categoryId: formData.get(\"categoryId\"),\r\n//     });\r\n\r\n//   await db.product.create({\r\n//     data: {\r\n//       name: fd.name,\r\n//       description: fd.description,\r\n//       price: fd.price,\r\n//       imageUrl: fd.imageUrl || \"\",\r\n//       categoryId: fd.categoryId,\r\n//     },\r\n//   });\r\n\r\n//   revalidatePath(\"/product\");\r\n//   redirect(\"/product\"); \r\n// }\r\n// const supabase = createClient(\r\n//   process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n//   process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n// );\r\n\r\n// // export async function createProduct(formData: FormData) {\r\n// //   const name = formData.get(\"name\") as string;\r\n// //   const description = formData.get(\"description\") as string;\r\n// //   const price = parseFloat(formData.get(\"price\") as string);\r\n// //   const categoryId = formData.get(\"categoryId\") as string;\r\n// //   const file = formData.get(\"image\") as File;\r\n\r\n// //   if (!file || file.size === 0) throw new Error(\"Файл изображения не выбран\");\r\n\r\n// //   const filePath = `products/${Date.now()}-${file.name}`;\r\n\r\n// //   // Загрузка в Supabase Storage\r\n// //   const { error: uploadError } = await supabase.storage\r\n// //     .from('product-images')\r\n// //     .upload(filePath, file, { upsert: true });\r\n\r\n// //   if (uploadError) throw uploadError;\r\n\r\n// //   const { data: imageData } = supabase\r\n// //     .storage\r\n// //     .from('product-images')\r\n// //     .getPublicUrl(filePath);\r\n\r\n// //   const imageUrl = imageData?.publicUrl;\r\n\r\n// //   if (!imageUrl) throw new Error(\"Не удалось получить URL изображения\");\r\n\r\n// //   // Сохранение в PostgreSQL\r\n// //   await db.product.create({\r\n// //     data: {\r\n// //       name,\r\n// //       description,\r\n// //       price,\r\n// //       categoryId,\r\n// //       imageUrl,\r\n// //     },\r\n// //   });\r\n\r\n// //   redirect('/admin/products'); // или куда тебе нужно\r\n// // }\r\n\r\n// export async function updateProduct(formData: FormData) {\r\n//   const data = z\r\n//     .object({\r\n//       id: z.string(),\r\n//       name: z.string(),\r\n//       description: z.string().optional(),\r\n//       price: z.coerce.number().nonnegative(),\r\n//       imageUrl: z.string().url().optional(),\r\n//       categoryId: z.string().optional(),\r\n//     })\r\n//     .parse({\r\n//       id: formData.get(\"id\"),\r\n//       name: formData.get(\"name\"),\r\n//       description: formData.get(\"description\"),\r\n//       price: formData.get(\"price\"),\r\n//       imageUrl: formData.get(\"imageUrl\"),\r\n//       categoryId: formData.get(\"categoryId\"),\r\n//     });\r\n\r\n//   await db.product.update({\r\n//     where: { id: data.id },\r\n//     data: {\r\n//       name: data.name,\r\n//       description: data.description,\r\n//       price: data.price,\r\n//       imageUrl: data.imageUrl,\r\n//       categoryId: data.categoryId,\r\n//     },\r\n//   });\r\n\r\n//   revalidatePath(`/products/${data.id}`); \r\n// }\r\n\r\n// export async function deleteProduct(formData: FormData) {\r\n//     const fd = z\r\n//       .object({\r\n//         id: z.string(),\r\n//       })\r\n//       .parse({\r\n//         id: formData.get(\"id\"),\r\n//       });\r\n//     await db.product.delete({ where: { id: fd.id } });\r\n//     redirect(\"/product\");\r\n//   }\r\n\r\n\r\n// export async function addProductCart(formData: FormData) {\r\n//   const session = await auth();\r\n\r\n//   if (!session?.user?.id) {\r\n//     throw new Error(\"Пользователь не авторизован\");\r\n//   }\r\n\r\n//   const { productId } = z\r\n//     .object({\r\n//       productId: z.string(),\r\n//     })\r\n//     .parse({\r\n//       productId: formData.get(\"productId\"),\r\n//     });\r\n\r\n//   const existingCartItem = await db.cartItem.findFirst({\r\n//     where: {\r\n//       userId: session.user.id,\r\n//       productId,\r\n//     },\r\n//   });\r\n\r\n//   if (existingCartItem) {\r\n//     await db.cartItem.update({\r\n//       where: { id: existingCartItem.id },\r\n//       data: { quantity: { increment: 1 } },\r\n//     });\r\n//   } else {\r\n//     await db.cartItem.create({\r\n//       data: {\r\n//         userId: session.user.id,\r\n//         productId,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//    redirect(\"/cart\");\r\n// }\r\n\"use server\";\r\n\r\nimport { redirect } from \"next/navigation\";\r\nimport { z } from \"zod\";\r\nimport { auth } from \"~/server/auth\";\r\nimport { db } from \"~/server/db\";\r\n\r\n// export async function createProduct(formData: FormData) {\r\n//   const fd = z\r\n//     .object({\r\n//       name: z.string(),\r\n//       description: z.string(),\r\n//       price: z.coerce.number().positive(),\r\n//       imageUrl: z.string().url().optional().or(z.literal(\"\")),\r\n//       categoryId: z.string(),\r\n//     })\r\n//     .parse({\r\n//       name: formData.get(\"name\"),\r\n//       description: formData.get(\"description\"),\r\n//       price: formData.get(\"price\"),\r\n//       imageUrl: formData.get(\"imageUrl\"),\r\n//       categoryId: formData.get(\"categoryId\"),\r\n//     });\r\n\r\n//   await db.product.create({\r\n//     data: {\r\n//       name: fd.name,\r\n//       description: fd.description,\r\n//       price: fd.price,\r\n//       imageUrl: fd.imageUrl || \"\",\r\n//       categoryId: fd.categoryId,\r\n//     },\r\n//   });\r\n\r\n//   revalidatePath(\"/product\");\r\n//   redirect(\"/product\"); \r\n// }\r\n// export async function createProduct(formData: FormData) {\r\n//   const name = formData.get(\"name\") as string;\r\n//   const description = formData.get(\"description\") as string;\r\n//   const price = Number(formData.get(\"price\"));\r\n//   const categoryId = formData.get(\"categoryId\") as string;\r\n//   const imageUrl = formData.get(\"imageUrl\") as string;\r\n\r\n//   if (!imageUrl) throw new Error(\"Изображение не выбрано\");\r\n\r\n//   await db.product.create({\r\n//     data: {\r\n//       name,\r\n//       description,\r\n//       price,\r\n//       categoryId,\r\n//       imageUrl,\r\n//     },\r\n//   });\r\n\r\n//   redirect(\"/product\");\r\n// }\r\nexport async function createProduct(formData: FormData) {\r\n  const name = formData.get(\"name\") as string;\r\n  const description = formData.get(\"description\") as string;\r\n  const price = Number(formData.get(\"price\"));\r\n  const stock = Number(formData.get(\"stock\"));\r\n  const categoryId = formData.get(\"categoryId\") as string;\r\n  const imageUrls = formData.getAll(\"imageUrls\") as string[];\r\n\r\n  if (!imageUrls.length) throw new Error(\"Не выбраны изображения\");\r\n\r\n  const product = await db.product.create({\r\n    data: {\r\n      name,\r\n      description,\r\n      price,\r\n      stock,\r\n      categoryId,\r\n      images: {\r\n        create: imageUrls.map((url) => ({ url })),\r\n      },\r\n    },\r\n  });\r\n\r\n  redirect(`/product/${product.id}`);\r\n}\r\n\r\nconst productUpdateSchema = z.object({\r\n  id: z.string().cuid(),\r\n  name: z.string().min(1),\r\n  description: z.string().optional(),\r\n  price: z.number().nonnegative(),\r\n  imageUrl: z.string().url().optional(),\r\n  categoryId: z.string().cuid(),\r\n});\r\n\r\n export async function updateProduct(data: unknown) {\r\n  // Валидируем входные данные, чтобы получить типизированный объект\r\n  const parsedData = productUpdateSchema.parse(data);\r\n\r\n  // Формируем массив для создания изображений, если URL валиден\r\n  const imagesData = parsedData.imageUrl ? [{ url: parsedData.imageUrl }] : [];\r\n\r\n  await db.product.update({\r\n    where: { id: parsedData.id },\r\n    data: {\r\n      name: parsedData.name,\r\n      description: parsedData.description,\r\n      price: parsedData.price,\r\n      images: {\r\n        deleteMany: {},\r\n        create: imagesData,\r\n      },\r\n      categoryId: parsedData.categoryId,\r\n    },\r\n  });\r\n}\r\nexport async function deleteProduct(formData: FormData) {\r\n    const fd = z\r\n      .object({\r\n        id: z.string(),\r\n      })\r\n      .parse({\r\n        id: formData.get(\"id\"),\r\n      });\r\n    await db.product.delete({ where: { id: fd.id } });\r\n    redirect(\"/product\");\r\n  }\r\n\r\n\r\n// export async function addProductCart(formData: FormData) {\r\n//   const session = await auth();\r\n\r\n//   if (!session?.user?.id) {\r\n//     throw new Error(\"Пользователь не авторизован\");\r\n//   }\r\n\r\n//   const { productId } = z\r\n//     .object({\r\n//       productId: z.string(),\r\n//     })\r\n//     .parse({\r\n//       productId: formData.get(\"productId\"),\r\n//     });\r\n\r\n//   const existingCartItem = await db.cartItem.findFirst({\r\n//     where: {\r\n//       userId: session.user.id,\r\n//       productId,\r\n//     },\r\n//   });\r\n\r\n//   if (existingCartItem) {\r\n//     await db.cartItem.update({\r\n//       where: { id: existingCartItem.id },\r\n//       data: { quantity: { increment: 1 } },\r\n//     });\r\n//   } else {\r\n//     await db.cartItem.create({\r\n//       data: {\r\n//         userId: session.user.id,\r\n//         productId,\r\n//         quantity: 1,\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//    redirect(\"/cart\");\r\n// }\r\nexport async function addProductCart(formData: FormData) {\r\n  const session = await auth();\r\n\r\n  if (!session?.user?.id) {\r\n    throw new Error(\"Пользователь не авторизован\");\r\n  }\r\n\r\n  const { productId, quantity } = z\r\n    .object({\r\n      productId: z.string(),\r\n      quantity: z.string().transform((val) => parseInt(val, 10)),\r\n    })\r\n    .parse({\r\n      productId: formData.get(\"productId\"),\r\n      quantity: formData.get(\"quantity\"),\r\n    });\r\n\r\n  const existingCartItem = await db.cartItem.findFirst({\r\n    where: {\r\n      userId: session.user.id,\r\n      productId,\r\n    },\r\n  });\r\n\r\n  if (existingCartItem) {\r\n    await db.cartItem.update({\r\n      where: { id: existingCartItem.id },\r\n      data: { quantity: { increment: quantity } },\r\n    });\r\n  } else {\r\n    await db.cartItem.create({\r\n      data: {\r\n        userId: session.user.id,\r\n        productId,\r\n        quantity,\r\n      },\r\n    });\r\n  }\r\n\r\n  redirect(\"/cart\");\r\n}\r\n"],"names":[],"mappings":"AAAA,gBAAgB;AAEhB,+CAA+C;AAC/C,8CAA8C;AAC9C,2BAA2B;AAC3B,wCAAwC;AACxC,oCAAoC;AACpC,wDAAwD;AACxD,4DAA4D;AAC5D,iBAAiB;AACjB,gBAAgB;AAChB,0BAA0B;AAC1B,iCAAiC;AACjC,6CAA6C;AAC7C,iEAAiE;AACjE,gCAAgC;AAChC,SAAS;AACT,eAAe;AACf,oCAAoC;AACpC,kDAAkD;AAClD,sCAAsC;AACtC,4CAA4C;AAC5C,gDAAgD;AAChD,UAAU;AAEV,8BAA8B;AAC9B,cAAc;AACd,uBAAuB;AACvB,qCAAqC;AACrC,yBAAyB;AACzB,qCAAqC;AACrC,mCAAmC;AACnC,SAAS;AACT,QAAQ;AAER,gCAAgC;AAChC,2BAA2B;AAC3B,IAAI;AACJ,iCAAiC;AACjC,2CAA2C;AAC3C,+CAA+C;AAC/C,KAAK;AAEL,+DAA+D;AAC/D,oDAAoD;AACpD,kEAAkE;AAClE,kEAAkE;AAClE,gEAAgE;AAChE,mDAAmD;AAEnD,oFAAoF;AAEpF,+DAA+D;AAE/D,sCAAsC;AACtC,6DAA6D;AAC7D,iCAAiC;AACjC,oDAAoD;AAEpD,2CAA2C;AAE3C,4CAA4C;AAC5C,kBAAkB;AAClB,iCAAiC;AACjC,kCAAkC;AAElC,8CAA8C;AAE9C,8EAA8E;AAE9E,kCAAkC;AAClC,iCAAiC;AACjC,iBAAiB;AACjB,iBAAiB;AACjB,wBAAwB;AACxB,kBAAkB;AAClB,uBAAuB;AACvB,qBAAqB;AACrB,YAAY;AACZ,WAAW;AAEX,2DAA2D;AAC3D,OAAO;AAEP,4DAA4D;AAC5D,mBAAmB;AACnB,gBAAgB;AAChB,wBAAwB;AACxB,0BAA0B;AAC1B,4CAA4C;AAC5C,gDAAgD;AAChD,+CAA+C;AAC/C,2CAA2C;AAC3C,SAAS;AACT,eAAe;AACf,gCAAgC;AAChC,oCAAoC;AACpC,kDAAkD;AAClD,sCAAsC;AACtC,4CAA4C;AAC5C,gDAAgD;AAChD,UAAU;AAEV,8BAA8B;AAC9B,8BAA8B;AAC9B,cAAc;AACd,yBAAyB;AACzB,uCAAuC;AACvC,2BAA2B;AAC3B,iCAAiC;AACjC,qCAAqC;AACrC,SAAS;AACT,QAAQ;AAER,6CAA6C;AAC7C,IAAI;AAEJ,4DAA4D;AAC5D,mBAAmB;AACnB,kBAAkB;AAClB,0BAA0B;AAC1B,WAAW;AACX,iBAAiB;AACjB,kCAAkC;AAClC,YAAY;AACZ,yDAAyD;AACzD,4BAA4B;AAC5B,MAAM;AAGN,6DAA6D;AAC7D,kCAAkC;AAElC,8BAA8B;AAC9B,sDAAsD;AACtD,MAAM;AAEN,4BAA4B;AAC5B,gBAAgB;AAChB,+BAA+B;AAC/B,SAAS;AACT,eAAe;AACf,8CAA8C;AAC9C,UAAU;AAEV,2DAA2D;AAC3D,eAAe;AACf,iCAAiC;AACjC,mBAAmB;AACnB,SAAS;AACT,QAAQ;AAER,4BAA4B;AAC5B,iCAAiC;AACjC,4CAA4C;AAC5C,8CAA8C;AAC9C,UAAU;AACV,aAAa;AACb,iCAAiC;AACjC,gBAAgB;AAChB,mCAAmC;AACnC,qBAAqB;AACrB,uBAAuB;AACvB,WAAW;AACX,UAAU;AACV,MAAM;AAEN,wBAAwB;AACxB,IAAI;;;;;;;;;IA2DkB;IAmCC;IAqBD;IAoDA"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/_components/addProduct/detailForm.tsx"],"sourcesContent":["\"use client\"\r\nimport { useState } from \"react\";\r\nimport { createProduct } from \"~/app/api/action/product\";\r\n\r\nexport function AddProductForm({ images, catalog }: { images: { name: string, url: string }[], catalog: any[] }) {\r\n    const [selectedImages, setSelectedImages] = useState<string[]>([]);\r\n\r\n    const toggleImage = (url: string) => {\r\n      setSelectedImages((prev: string[]) =>\r\n        prev.includes(url)\r\n          ? prev.filter((u) => u !== url)\r\n          : [...prev, url]\r\n      );\r\n    };\r\n    console.log('Images from Supabase:', images);\r\n  \r\n    return (\r\n        <div className=\"p-6 max-w-2xl mx-auto bg-white shadow-lg rounded-lg\">\r\n          <h1 className=\"text-3xl font-bold mb-6 text-center\">Добавить новый товар</h1>\r\n    \r\n          <form className=\"space-y-6\" action={createProduct}>\r\n            <div>\r\n              <label htmlFor=\"name\" className=\"label font-semibold\">Название товара</label>\r\n              <input\r\n                id=\"name\"\r\n                name=\"name\"\r\n                required\r\n                className=\"input input-bordered w-full p-3 rounded-md border-gray-300 focus:ring-2 focus:ring-purple-400\"\r\n                placeholder=\"Введите название товара\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"description\" className=\"label font-semibold\">Описание</label>\r\n              <textarea\r\n                id=\"description\"\r\n                name=\"description\"\r\n                required\r\n                className=\"textarea textarea-bordered w-full p-3 rounded-md border-gray-300 focus:ring-2 focus:ring-purple-400\"\r\n                placeholder=\"Введите описание товара\"\r\n                rows={4}\r\n              />\r\n            </div>\r\n    \r\n            <div>\r\n              <label htmlFor=\"price\" className=\"label font-semibold\">Цена</label>\r\n              <input\r\n                id=\"price\"\r\n                name=\"price\"\r\n                type=\"number\"\r\n                required\r\n                className=\"input input-bordered w-full p-3 rounded-md border-gray-300 focus:ring-2 focus:ring-purple-400\"\r\n                placeholder=\"Введите цену товара\"\r\n              />\r\n            </div>\r\n                  {/* Изображения */}\r\n                  <div>\r\n              <label className=\"label font-semibold\">Выберите изображения</label>\r\n              <div className=\"grid grid-cols-3 gap-2 mt-2\">\r\n                {images.map((img) => {\r\n                  const isSelected = selectedImages.includes(img.url);\r\n                  return (\r\n                    <div\r\n                      key={img.url}\r\n                      className={`cursor-pointer border-2 rounded-md ${isSelected ? 'border-purple-600' : 'border-gray-300'}`}\r\n                      onClick={() => toggleImage(img.url)}\r\n                    >\r\n                      <img src={img.url} alt={img.name} className=\"w-full h-24 object-cover rounded-md\" />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n    \r\n              {/* Скрытые поля для отправки */}\r\n              {selectedImages.map((url, idx) => (\r\n                <input key={idx} type=\"hidden\" name=\"imageUrls\" value={url} />\r\n              ))}\r\n            </div>\r\n    <div>\r\n      <label htmlFor=\"stock\" className=\"label font-semibold\">Количество на складе</label>\r\n      <input\r\n        id=\"stock\"\r\n        name=\"stock\"\r\n        type=\"number\"\r\n        min={0}\r\n        required\r\n        className=\"input input-bordered w-full p-3 rounded-md border-gray-300 focus:ring-2 focus:ring-purple-400\"\r\n        placeholder=\"Введите количество товара\"\r\n      />\r\n    </div>\r\n            <div>\r\n              <label htmlFor=\"categoryId\" className=\"label font-semibold\">Категория товара</label>\r\n              <select\r\n                id=\"categoryId\"\r\n                name=\"categoryId\"\r\n                required\r\n                className=\"select select-bordered w-full p-3 rounded-md border-gray-300 focus:ring-2 focus:ring-purple-400\"\r\n              >\r\n                <option value=\"\">Выберите категорию</option>\r\n                {catalog.map((category) => (\r\n                  <option key={category.id} value={category.id}>\r\n                    {category.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n    \r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary w-full py-3 rounded-md text-white bg-purple-600 hover:bg-purple-700 transition duration-300\"\r\n            >\r\n              Добавить товар\r\n            </button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIO,SAAS,eAAe,EAAE,MAAM,EAAE,OAAO,EAA+D;;IAC3G,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,4RAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAEjE,MAAM,cAAc,CAAC;QACnB,kBAAkB,CAAC,OACjB,KAAK,QAAQ,CAAC,OACV,KAAK,MAAM,CAAC,CAAC,IAAM,MAAM,OACzB;mBAAI;gBAAM;aAAI;IAEtB;IACA,QAAQ,GAAG,CAAC,yBAAyB;IAErC,qBACI,4TAAC;QAAI,WAAU;;0BACb,4TAAC;gBAAG,WAAU;0BAAsC;;;;;;0BAEpD,4TAAC;gBAAK,WAAU;gBAAY,QAAQ,yIAAA,CAAA,gBAAa;;kCAC/C,4TAAC;;0CACC,4TAAC;gCAAM,SAAQ;gCAAO,WAAU;0CAAsB;;;;;;0CACtD,4TAAC;gCACC,IAAG;gCACH,MAAK;gCACL,QAAQ;gCACR,WAAU;gCACV,aAAY;;;;;;;;;;;;kCAGhB,4TAAC;;0CACC,4TAAC;gCAAM,SAAQ;gCAAc,WAAU;0CAAsB;;;;;;0CAC7D,4TAAC;gCACC,IAAG;gCACH,MAAK;gCACL,QAAQ;gCACR,WAAU;gCACV,aAAY;gCACZ,MAAM;;;;;;;;;;;;kCAIV,4TAAC;;0CACC,4TAAC;gCAAM,SAAQ;gCAAQ,WAAU;0CAAsB;;;;;;0CACvD,4TAAC;gCACC,IAAG;gCACH,MAAK;gCACL,MAAK;gCACL,QAAQ;gCACR,WAAU;gCACV,aAAY;;;;;;;;;;;;kCAIV,4TAAC;;0CACL,4TAAC;gCAAM,WAAU;0CAAsB;;;;;;0CACvC,4TAAC;gCAAI,WAAU;0CACZ,OAAO,GAAG,CAAC,CAAC;oCACX,MAAM,aAAa,eAAe,QAAQ,CAAC,IAAI,GAAG;oCAClD,qBACE,4TAAC;wCAEC,WAAW,CAAC,mCAAmC,EAAE,aAAa,sBAAsB,mBAAmB;wCACvG,SAAS,IAAM,YAAY,IAAI,GAAG;kDAElC,cAAA,4TAAC;4CAAI,KAAK,IAAI,GAAG;4CAAE,KAAK,IAAI,IAAI;4CAAE,WAAU;;;;;;uCAJvC,IAAI,GAAG;;;;;gCAOlB;;;;;;4BAID,eAAe,GAAG,CAAC,CAAC,KAAK,oBACxB,4TAAC;oCAAgB,MAAK;oCAAS,MAAK;oCAAY,OAAO;mCAA3C;;;;;;;;;;;kCAGxB,4TAAC;;0CACC,4TAAC;gCAAM,SAAQ;gCAAQ,WAAU;0CAAsB;;;;;;0CACvD,4TAAC;gCACC,IAAG;gCACH,MAAK;gCACL,MAAK;gCACL,KAAK;gCACL,QAAQ;gCACR,WAAU;gCACV,aAAY;;;;;;;;;;;;kCAGR,4TAAC;;0CACC,4TAAC;gCAAM,SAAQ;gCAAa,WAAU;0CAAsB;;;;;;0CAC5D,4TAAC;gCACC,IAAG;gCACH,MAAK;gCACL,QAAQ;gCACR,WAAU;;kDAEV,4TAAC;wCAAO,OAAM;kDAAG;;;;;;oCAChB,QAAQ,GAAG,CAAC,CAAC,yBACZ,4TAAC;4CAAyB,OAAO,SAAS,EAAE;sDACzC,SAAS,IAAI;2CADH,SAAS,EAAE;;;;;;;;;;;;;;;;;kCAO9B,4TAAC;wBACC,MAAK;wBACL,WAAU;kCACX;;;;;;;;;;;;;;;;;;AAMT;GA/GY;KAAA"}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/node_modules/.pnpm/next%4015.1.7_react-dom%4018.3.1_react%4018.3.1__react%4018.3.1/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,wRAI2C,EAC7CA,qBAAqB","ignoreList":[0]}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}