{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/_components/ticket/messageList.tsx"],"sourcesContent":["// \"use client\"\r\n// import { RefObject } from \"react\";\r\n\r\n// interface Message {\r\n//   message: string | null;\r\n//   supportAgent?: boolean;\r\n//   createdAt: string;\r\n// }\r\n\r\n// interface Props {\r\n//   messages?: { messages: Message[] | null} | null;\r\n//   isLoading: boolean;\r\n//   isError: boolean;\r\n//   messagesEndRef: RefObject<HTMLDivElement>;\r\n// }\r\n\r\n// export default function MessageList({\r\n//   messages,\r\n//   isLoading,\r\n//   isError,\r\n//   messagesEndRef,\r\n// }: Props) {\r\n//   if (isLoading) {\r\n//     return (\r\n//       <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\r\n//         <div className=\"text-center text-gray-400\">Загрузка сообщений...</div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (isError) {\r\n//     return (\r\n//       <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\r\n//         <div className=\"text-center text-red-600\">Ошибка загрузки сообщений</div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const msgs = messages?.messages ?? [];\r\n\r\n//   return (\r\n//     <div className=\"flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50\">\r\n//       {msgs.length === 0 ? (\r\n//         <div className=\"text-gray-500 text-center mt-10\">Сообщений пока нет.</div>\r\n//       ) : (\r\n//         msgs.map((msg, i) => {\r\n//           const isSupport = msg.supportAgent === true;\r\n//           return (\r\n//             <div\r\n//               key={i}\r\n//               className={`max-w-[80%] p-3 rounded-lg shadow ${\r\n//                 isSupport ? \"bg-gray-200 self-start\" : \"bg-blue-100 self-end ml-auto\"\r\n//               }`}\r\n//             >\r\n//               <p className=\"text-sm\">{msg.message}</p>\r\n//               <div className=\"text-xs text-gray-500 mt-1 text-right\">\r\n//                 {new Date(msg.createdAt).toLocaleString()}\r\n//               </div>\r\n//             </div>\r\n//           );\r\n//         })\r\n//       )}\r\n//       <div ref={messagesEndRef} />\r\n//     </div>\r\n//   );\r\n// }\r\n\"use client\";\r\nimport { RefObject } from \"react\";\r\nimport { CheckIcon, PencilSquareIcon } from \"@heroicons/react/24/outline\";\r\n\r\ninterface Message {\r\n  message: string | null;\r\n  supportAgent?: boolean;\r\n  createdAt: string;\r\n  userId: string;  // Добавим userId, чтобы знать, кто отправил сообщение\r\n}\r\n\r\ninterface Props {\r\n  messages?: { messages: Message[] | null } | null;\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  messagesEndRef: RefObject<HTMLDivElement>;\r\n  currentUserId: string;  // Добавим currentUserId для определения, кто отправил сообщение\r\n  // statusFlag: number;\r\n  role: string | undefined\r\n}\r\n\r\nexport default function MessageList({\r\n  messages,\r\n  isLoading,\r\n  isError,\r\n  messagesEndRef,\r\n  currentUserId,  // Получаем currentUserId\r\n  // statusFlag,\r\n  role,\r\n}: Props) {\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\r\n        <div className=\"text-center text-gray-400\">Загрузка сообщений...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isError) {\r\n    return (\r\n      <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\r\n        <div className=\"text-center text-red-600\">Ошибка загрузки сообщений</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const msgs = messages?.messages ?? [];\r\n\r\n  return (\r\n    <div className=\"flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50\">\r\n      {msgs.length === 0 ? (\r\n        <div className=\"text-gray-500 text-center mt-10\">Сообщений пока нет.</div>\r\n      ) : (\r\n        msgs.map((msg, i) => {\r\n          const isCurrentUser = msg.userId === currentUserId;  // Определяем, кто отправил сообщение\r\n          const isSupport = msg.supportAgent === true;\r\n\r\n          return (\r\n            <div\r\n              key={i}\r\n              className={`max-w-[80%] p-3 rounded-lg shadow ${\r\n                isCurrentUser\r\n                  ? \"bg-blue-100 self-end ml-auto\"  // Если сообщение от текущего пользователя\r\n                  : \"bg-gray-200 self-start\"         // Если сообщение от собеседника\r\n              }`}\r\n            >\r\n              <p className=\"text-sm\">{msg.message}</p>\r\n              <div className=\"text-xs text-gray-500 mt-1 text-right\">\r\n              <div className=\"flex\">\r\n              {/* {role != \"ADMIN\" && statusFlag >= 1 && ( */}\r\n                {role != \"ADMIN\" && (\r\n    <CheckIcon className= \"w-4\" />\r\n  )}\r\n  {role != \"ADMIN\"  && (\r\n    <CheckIcon className= \"w-4\" />\r\n  )}\r\n</div>\r\n                {new Date(msg.createdAt).toLocaleString()}\r\n              </div>\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"AAAA,eAAe;AACf,qCAAqC;AAErC,sBAAsB;AACtB,4BAA4B;AAC5B,4BAA4B;AAC5B,uBAAuB;AACvB,IAAI;AAEJ,oBAAoB;AACpB,qDAAqD;AACrD,wBAAwB;AACxB,sBAAsB;AACtB,+CAA+C;AAC/C,IAAI;AAEJ,wCAAwC;AACxC,cAAc;AACd,eAAe;AACf,aAAa;AACb,oBAAoB;AACpB,cAAc;AACd,qBAAqB;AACrB,eAAe;AACf,gEAAgE;AAChE,iFAAiF;AACjF,eAAe;AACf,SAAS;AACT,MAAM;AAEN,mBAAmB;AACnB,eAAe;AACf,gEAAgE;AAChE,oFAAoF;AACpF,eAAe;AACf,SAAS;AACT,MAAM;AAEN,2CAA2C;AAE3C,aAAa;AACb,wEAAwE;AACxE,+BAA+B;AAC/B,qFAAqF;AACrF,cAAc;AACd,iCAAiC;AACjC,yDAAyD;AACzD,qBAAqB;AACrB,mBAAmB;AACnB,wBAAwB;AACxB,iEAAiE;AACjE,wFAAwF;AACxF,oBAAoB;AACpB,gBAAgB;AAChB,yDAAyD;AACzD,wEAAwE;AACxE,6DAA6D;AAC7D,uBAAuB;AACvB,qBAAqB;AACrB,eAAe;AACf,aAAa;AACb,WAAW;AACX,qCAAqC;AACrC,aAAa;AACb,OAAO;AACP,IAAI;;;;;AAGJ;AAFA;;;AAqBe,SAAS,YAAY,EAClC,QAAQ,EACR,SAAS,EACT,OAAO,EACP,cAAc,EACd,aAAa,EACb,cAAc;AACd,IAAI,EACE;IACN,IAAI,WAAW;QACb,qBACE,6WAAC;YAAI,WAAU;sBACb,cAAA,6WAAC;gBAAI,WAAU;0BAA4B;;;;;;;;;;;IAGjD;IAEA,IAAI,SAAS;QACX,qBACE,6WAAC;YAAI,WAAU;sBACb,cAAA,6WAAC;gBAAI,WAAU;0BAA2B;;;;;;;;;;;IAGhD;IAEA,MAAM,OAAO,UAAU,YAAY,EAAE;IAErC,qBACE,6WAAC;QAAI,WAAU;;YACZ,KAAK,MAAM,KAAK,kBACf,6WAAC;gBAAI,WAAU;0BAAkC;;;;;uBAEjD,KAAK,GAAG,CAAC,CAAC,KAAK;gBACb,MAAM,gBAAgB,IAAI,MAAM,KAAK,eAAgB,qCAAqC;gBAC1F,MAAM,YAAY,IAAI,YAAY,KAAK;gBAEvC,qBACE,6WAAC;oBAEC,WAAW,CAAC,kCAAkC,EAC5C,gBACI,+BAAgC,0CAA0C;uBAC1E,yBAAiC,gCAAgC;sBACrE;;sCAEF,6WAAC;4BAAE,WAAU;sCAAW,IAAI,OAAO;;;;;;sCACnC,6WAAC;4BAAI,WAAU;;8CACf,6WAAC;oCAAI,WAAU;;wCAEZ,QAAQ,yBACrB,6WAAC,wSAAA,CAAA,YAAS;4CAAC,WAAW;;;;;;wCAEvB,QAAQ,yBACP,6WAAC,wSAAA,CAAA,YAAS;4CAAC,WAAW;;;;;;;;;;;;gCAGT,IAAI,KAAK,IAAI,SAAS,EAAE,cAAc;;;;;;;;mBAlBpC;;;;;YAsBX;0BAEF,6WAAC;gBAAI,KAAK;;;;;;;;;;;;AAGhB"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/_components/ticket/messageInput.tsx"],"sourcesContent":["\"use client\"\r\nimport { RefObject } from \"react\";\r\n\r\ninterface Props {\r\n  input: string;\r\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n  onSubmit: (e: React.FormEvent) => void;\r\n  textareaRef: RefObject<HTMLTextAreaElement>;\r\n}\r\n\r\nexport default function MessageInput({\r\n  input,\r\n  onChange,\r\n  onSubmit,\r\n  textareaRef,\r\n}: Props) {\r\n  return (\r\n    <form\r\n      onSubmit={onSubmit}\r\n      className=\"p-4 bg-white border-t flex items-end gap-2\"\r\n    >\r\n      <textarea\r\n        ref={textareaRef}\r\n        value={input}\r\n        onChange={onChange}\r\n        rows={1}\r\n        placeholder=\"Введите сообщение...\"\r\n        className=\"flex-1 resize-none overflow-hidden p-2 border rounded bg-gray-100\"\r\n        style={{ minHeight: \"40px\", maxHeight: \"200px\" }}\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\r\n      >\r\n        Отправить\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAUe,SAAS,aAAa,EACnC,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,WAAW,EACL;IACN,qBACE,6WAAC;QACC,UAAU;QACV,WAAU;;0BAEV,6WAAC;gBACC,KAAK;gBACL,OAAO;gBACP,UAAU;gBACV,MAAM;gBACN,aAAY;gBACZ,WAAU;gBACV,OAAO;oBAAE,WAAW;oBAAQ,WAAW;gBAAQ;;;;;;0BAEjD,6WAAC;gBACC,MAAK;gBACL,WAAU;0BACX;;;;;;;;;;;;AAKP"}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/src/app/_components/ticket/TticketView.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport MessageList from \"./messageList\";\r\nimport MessageInput from \"./messageInput\";\r\nimport { api } from \"~/trpc/react\";\r\n\r\ninterface Message {\r\n  message: string | null;\r\n  supportAgent?: boolean;\r\n  createdAt: string;\r\n  userId: string;  // Добавлено свойство userId\r\n}\r\n\r\n// export default function TicketView({\r\n//   initialMessages,\r\n//   ticketId,\r\n//   userId,\r\n//   role,\r\n// }: {\r\n//   initialMessages: Message[];\r\n//   ticketId: string;\r\n//   userId: string ;\r\n//   role: string | undefined;\r\n// }) {\r\n//   const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n//   const [input, setInput] = useState(\"\");\r\n//   const [messages, setMessages] = useState<Message[]>(initialMessages);\r\n//   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n//   const isSupport = role === \"ADMIN\" || role === \"WORKER\";\r\n\r\n//   const addMessageMutation = api.ticket.addMessage.useMutation();\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n\r\n//     const trimmed = input.trim();\r\n//     if (!trimmed) return;\r\n\r\n//     const newMessage: Message = {\r\n//       message: trimmed,\r\n//       supportAgent: isSupport,\r\n//       createdAt: new Date().toISOString(),\r\n//       userId: userId || \"\",  // Убедимся, что userId передается\r\n//     };\r\n\r\n//     setMessages((prev) => [...prev, newMessage]);\r\n//     setInput(\"\");\r\n\r\n//     try {\r\n//       await addMessageMutation.mutateAsync({\r\n//         ticketId,\r\n//         message: trimmed,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error(\"Ошибка отправки сообщения:\", error);\r\n//     } finally {\r\n//       messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col h-[calc(100vh-64px)]\">\r\n//       <MessageList\r\n//         messages={{ messages }}\r\n//         isError={!!addMessageMutation.error}\r\n//         messagesEndRef={messagesEndRef}\r\n//         isLoading={false}\r\n//         currentUserId={userId || \"\"}  // Передаем userId для определения, кто отправил сообщение\r\n//       />\r\n//       <MessageInput\r\n//         input={input}\r\n//         onChange={(e) => setInput(e.target.value)}\r\n//         onSubmit={handleSubmit}\r\n//         textareaRef={textareaRef}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export default function TicketView({\r\n//   initialMessages,\r\n//   ticketId,\r\n//   userId,\r\n//   role,\r\n//   // statusFlag,\r\n//   ticketStatus,\r\n// }: {\r\n//   initialMessages: Message[];\r\n//   ticketId: string;\r\n//   userId: string;\r\n//   role: string | undefined;\r\n//   // statusFlag: number;\r\n//   ticketStatus: string | undefined;\r\n// }) {\r\n//   const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n//   const [input, setInput] = useState(\"\");\r\n//   const [messages, setMessages] = useState<Message[]>(initialMessages);\r\n//   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n//   const isSupport = role === \"ADMIN\" || role === \"WORKER\";\r\n\r\n//   const addMessageMutation = api.ticket.addMessage.useMutation();\r\n//   const updateTicketStatusMutation = api.ticket.updateTicketStatus.useMutation();\r\n\r\n//   // useEffect(() => {\r\n//   //   // Если это сообщение от поддержки, меняем статус тикета на \"Прочитано\"\r\n//   //   if (messages.length > 0 && isSupport) {\r\n//   //     updateTicketStatusMutation.mutate({ ticketId, status: \"Read\" });\r\n//   //   }\r\n//   // }, [messages, isSupport, ticketId, updateTicketStatusMutation]);\r\n//   // const isUnread = role !== \"USER\" && ticketStatus === \"Sent\";\r\n\r\n//   useEffect(() => {\r\n//     if (role !== \"USER\" && ticketStatus === \"Sent\") {\r\n//       updateTicketStatusMutation.mutate({\r\n//         ticketId,\r\n//         status: \"Read\",\r\n//       });\r\n//     }\r\n//   }, [ticketId, role, ticketStatus]);\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n\r\n//     const trimmed = input.trim();\r\n//     if (!trimmed) return;\r\n\r\n//     const newMessage: Message = {\r\n//       message: trimmed,\r\n//       supportAgent: isSupport,\r\n//       createdAt: new Date().toISOString(),\r\n//       userId: userId || \"\", \r\n//     };\r\n\r\n//     setMessages((prev) => [...prev, newMessage]);\r\n//     setInput(\"\");\r\n\r\n//     try {\r\n//       // Добавляем сообщение в базу данных\r\n//       await addMessageMutation.mutateAsync({\r\n//         ticketId,\r\n//         message: trimmed,\r\n//       });\r\n\r\n//       // После отправки сообщения, если это сообщение от пользователя, меняем статус тикета на \"Отправлено\"\r\n//       if (!isSupport) {\r\n//         updateTicketStatusMutation.mutate({ ticketId, status: \"Sent\" });\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Ошибка отправки сообщения:\", error);\r\n//     } finally {\r\n//       messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col h-[calc(100vh-64px)]\">\r\n//       <MessageList\r\n//         messages={{ messages }}\r\n//         isError={!!addMessageMutation.error}\r\n//         messagesEndRef={messagesEndRef}\r\n//         isLoading={false}\r\n//         currentUserId={userId || \"\"}  // Передаем userId для определения, кто отправил сообщение\r\n//         // statusFlag = {statusFlag}\r\n//         role = {role}\r\n//       />\r\n//       <MessageInput\r\n//         input={input}\r\n//         onChange={(e) => setInput(e.target.value)}\r\n//         onSubmit={handleSubmit}\r\n//         textareaRef={textareaRef}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\nexport default function TicketView({\r\n  initialMessages,\r\n  ticketId,\r\n  userId,\r\n  role,\r\n  ticketStatus,\r\n}: {\r\n  initialMessages: Message[];\r\n  ticketId: string;\r\n  userId: string;\r\n  role: string | undefined;\r\n  ticketStatus: string | undefined;\r\n}) {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState<Message[]>(initialMessages);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [isPolling, setIsPolling] = useState(false);\r\n  const lastUpdateRef = useRef<Date>(new Date());\r\n\r\n  const isSupport = role === \"ADMIN\" || role === \"WORKER\";\r\n\r\n  const addMessageMutation = api.ticket.addMessage.useMutation();\r\n  const updateTicketStatusMutation = api.ticket.updateTicketStatus.useMutation();\r\n  const getTicketUpdates = api.ticket.getTicketUpdates.useMutation();\r\n\r\n  // Функция для проверки обновлений\r\n  const checkForUpdates = useCallback(async () => {\r\n    if (isPolling) return;\r\n    \r\n    setIsPolling(true);\r\n    try {\r\n      const updates = await getTicketUpdates.mutateAsync({\r\n        ticketId,\r\n        lastUpdate: lastUpdateRef.current,\r\n      });\r\n\r\n      if (updates.messages.length > 0) {\r\n        setMessages(prev => [...prev, ...updates.messages]);\r\n        lastUpdateRef.current = new Date();\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking for updates:\", error);\r\n    } finally {\r\n      setIsPolling(false);\r\n    }\r\n  }, [ticketId, getTicketUpdates, isPolling]);\r\n\r\n  // Эффект для периодической проверки обновлений\r\n  useEffect(() => {\r\n    const interval = setInterval(checkForUpdates, 3000);\r\n    return () => clearInterval(interval);\r\n  }, [checkForUpdates]);\r\n\r\n  // Обновление статуса при загрузке\r\n  useEffect(() => {\r\n    if (role !== \"USER\" && ticketStatus === \"Sent\") {\r\n      updateTicketStatusMutation.mutate({\r\n        ticketId,\r\n        status: \"Read\",\r\n      });\r\n    }\r\n  }, [ticketId, role, ticketStatus]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const trimmed = input.trim();\r\n    if (!trimmed) return;\r\n\r\n    const newMessage: Message = {\r\n      message: trimmed,\r\n      supportAgent: isSupport,\r\n      createdAt: new Date().toISOString(),\r\n      userId: userId || \"\", \r\n    };\r\n\r\n    setMessages((prev) => [...prev, newMessage]);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      await addMessageMutation.mutateAsync({\r\n        ticketId,\r\n        message: trimmed,\r\n      });\r\n\r\n      if (!isSupport) {\r\n        updateTicketStatusMutation.mutate({ ticketId, status: \"Sent\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка отправки сообщения:\", error);\r\n    } finally {\r\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-[calc(100vh-64px)]\">\r\n      <MessageList\r\n        messages={{ messages }}\r\n        isError={!!addMessageMutation.error}\r\n        messagesEndRef={messagesEndRef}\r\n        isLoading={false}\r\n        currentUserId={userId || \"\"}\r\n        role={role}\r\n      />\r\n      <MessageInput\r\n        input={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onSubmit={handleSubmit}\r\n        textareaRef={textareaRef}\r\n      />\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AA6Le,SAAS,WAAW,EACjC,eAAe,EACf,QAAQ,EACR,MAAM,EACN,IAAI,EACJ,YAAY,EAOb;IACC,MAAM,cAAc,CAAA,GAAA,oUAAA,CAAA,SAAM,AAAD,EAAuB;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAa;IACpD,MAAM,iBAAiB,CAAA,GAAA,oUAAA,CAAA,SAAM,AAAD,EAAkB;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,gBAAgB,CAAA,GAAA,oUAAA,CAAA,SAAM,AAAD,EAAQ,IAAI;IAEvC,MAAM,YAAY,SAAS,WAAW,SAAS;IAE/C,MAAM,qBAAqB,qHAAA,CAAA,MAAG,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW;IAC5D,MAAM,6BAA6B,qHAAA,CAAA,MAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,WAAW;IAC5E,MAAM,mBAAmB,qHAAA,CAAA,MAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW;IAEhE,kCAAkC;IAClC,MAAM,kBAAkB,YAAY;QAClC,IAAI,WAAW;QAEf,aAAa;QACb,IAAI;YACF,MAAM,UAAU,MAAM,iBAAiB,WAAW,CAAC;gBACjD;gBACA,YAAY,cAAc,OAAO;YACnC;YAEA,IAAI,QAAQ,QAAQ,CAAC,MAAM,GAAG,GAAG;gBAC/B,YAAY,CAAA,OAAQ;2BAAI;2BAAS,QAAQ,QAAQ;qBAAC;gBAClD,cAAc,OAAO,GAAG,IAAI;gBAC5B,eAAe,OAAO,EAAE,eAAe;oBAAE,UAAU;gBAAS;YAC9D;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;QAC/C,SAAU;YACR,aAAa;QACf;IACF,GAAG;QAAC;QAAU;QAAkB;KAAU;IAE1C,+CAA+C;IAC/C,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW,YAAY,iBAAiB;QAC9C,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;KAAgB;IAEpB,kCAAkC;IAClC,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,UAAU,iBAAiB,QAAQ;YAC9C,2BAA2B,MAAM,CAAC;gBAChC;gBACA,QAAQ;YACV;QACF;IACF,GAAG;QAAC;QAAU;QAAM;KAAa;IAEjC,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,MAAM,UAAU,MAAM,IAAI;QAC1B,IAAI,CAAC,SAAS;QAEd,MAAM,aAAsB;YAC1B,SAAS;YACT,cAAc;YACd,WAAW,IAAI,OAAO,WAAW;YACjC,QAAQ,UAAU;QACpB;QAEA,YAAY,CAAC,OAAS;mBAAI;gBAAM;aAAW;QAC3C,SAAS;QAET,IAAI;YACF,MAAM,mBAAmB,WAAW,CAAC;gBACnC;gBACA,SAAS;YACX;YAEA,IAAI,CAAC,WAAW;gBACd,2BAA2B,MAAM,CAAC;oBAAE;oBAAU,QAAQ;gBAAO;YAC/D;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C,SAAU;YACR,eAAe,OAAO,EAAE,eAAe;gBAAE,UAAU;YAAS;QAC9D;IACF;IAEA,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC,mJAAA,CAAA,UAAW;gBACV,UAAU;oBAAE;gBAAS;gBACrB,SAAS,CAAC,CAAC,mBAAmB,KAAK;gBACnC,gBAAgB;gBAChB,WAAW;gBACX,eAAe,UAAU;gBACzB,MAAM;;;;;;0BAER,6WAAC,oJAAA,CAAA,UAAY;gBACX,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;gBACxC,UAAU;gBACV,aAAa;;;;;;;;;;;;AAIrB"}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file://D%3A/PP_2/12345%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F%20%E2%80%94%20%D0%BA%D0%BE%D0%BF%D0%B8%D1%8F/rater/node_modules/.pnpm/%40heroicons%2Breact%402.2.0_react%4018.3.1/node_modules/%40heroicons/react/24/outline/esm/CheckIcon.js"],"sourcesContent":["import * as React from \"react\";\nfunction CheckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m4.5 12.75 6 6 9-13.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CheckIcon);\nexport default ForwardRef;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,UAAU,EACjB,KAAK,EACL,OAAO,EACP,GAAG,OACJ,EAAE,MAAM;IACP,OAAO,WAAW,GAAE,qUAAM,aAAa,CAAC,OAAO,OAAO,MAAM,CAAC;QAC3D,OAAO;QACP,MAAM;QACN,SAAS;QACT,aAAa;QACb,QAAQ;QACR,eAAe;QACf,aAAa;QACb,KAAK;QACL,mBAAmB;IACrB,GAAG,QAAQ,QAAQ,WAAW,GAAE,qUAAM,aAAa,CAAC,SAAS;QAC3D,IAAI;IACN,GAAG,SAAS,MAAM,WAAW,GAAE,qUAAM,aAAa,CAAC,QAAQ;QACzD,eAAe;QACf,gBAAgB;QAChB,GAAG;IACL;AACF;AACA,MAAM,aAAa,WAAW,GAAG,qUAAM,UAAU,CAAC;uCACnC","ignoreList":[0]}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}